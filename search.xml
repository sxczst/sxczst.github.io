<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Navigation</title>
      <link href="2022/01/29/navigation/"/>
      <url>2022/01/29/navigation/</url>
      
        <content type="html"><![CDATA[<h6 id="androidx-navigation-fragment-NavHostFragment-onInflate"><a href="#androidx-navigation-fragment-NavHostFragment-onInflate" class="headerlink" title="androidx.navigation.fragment.NavHostFragment#onInflate"></a>androidx.navigation.fragment.NavHostFragment#onInflate</h6><ul><li>android.content.res.TypedArray<ul><li>app:navGraph</li><li>app:defaultNavHost</li></ul></li></ul><h6 id="androidx-navigation-fragment-NavHostFragment-onCreate"><a href="#androidx-navigation-fragment-NavHostFragment-onCreate" class="headerlink" title="androidx.navigation.fragment.NavHostFragment#onCreate"></a>androidx.navigation.fragment.NavHostFragment#onCreate</h6><ul><li><p>androidx.navigation.NavHostController</p><ul><li><p>androidx.navigation.NavController</p><ul><li><p>androidx.navigation.NavGraphNavigator</p></li><li><p>androidx.navigation.ActivityNavigator</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">NavController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ContextWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">Activity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mActivity <span class="token operator">=</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> context<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ContextWrapper<span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mNavigatorProvider<span class="token punctuation">.</span><span class="token function">addNavigator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NavGraphNavigator</span><span class="token punctuation">(</span>mNavigatorProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mNavigatorProvider<span class="token punctuation">.</span><span class="token function">addNavigator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActivityNavigator</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>androidx.activity.OnBackPressedDispatcher</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OnBackPressedCallback mOnBackPressedCallback <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">OnBackPressedCallback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleOnBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">popBackStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>androidx.navigation.fragment.NavHostFragment#onCreateNavController</p><ul><li>androidx.navigation.fragment.DialogFragmentNavigator</li><li>androidx.navigation.fragment.FragmentNavigator</li></ul></li><li><p>androidx.navigation.NavController#setGraph(int)</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGraph</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NavigationRes</span> <span class="token keyword">int</span> graphResId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle startDestinationArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setGraph</span><span class="token punctuation">(</span><span class="token function">getNavInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>graphResId<span class="token punctuation">)</span><span class="token punctuation">,</span> startDestinationArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>androidx.navigation.NavInflater#inflate(int)</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> NavGraph <span class="token function">inflate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NavigationRes</span> <span class="token keyword">int</span> graphResId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Resources res <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XmlResourceParser parser <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getXml</span><span class="token punctuation">(</span>graphResId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> AttributeSet attrs <span class="token operator">=</span> Xml<span class="token punctuation">.</span><span class="token function">asAttributeSet</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> type<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>START_TAG                <span class="token operator">&amp;&amp;</span> type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Empty loop</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>START_TAG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">XmlPullParserException</span><span class="token punctuation">(</span><span class="token string">"No start tag found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String rootElement <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NavDestination destination <span class="token operator">=</span> <span class="token function">inflate</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> graphResId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>destination <span class="token keyword">instanceof</span> <span class="token class-name">NavGraph</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Root element &lt;"</span> <span class="token operator">+</span> rootElement <span class="token operator">+</span> <span class="token string">">"</span>                    <span class="token operator">+</span> <span class="token string">" did not inflate into a NavGraph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>NavGraph<span class="token punctuation">)</span> destination<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Exception inflating "</span>                <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getResourceName</span><span class="token punctuation">(</span>graphResId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" line "</span>                <span class="token operator">+</span> parser<span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        parser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>androidx.navigation.NavDestination</p></li><li><p>androidx.navigation.NavInflater#inflate(android.content.res.Resources, android.content.res.XmlResourceParser, android.util.AttributeSet, int)</p><ul><li>androidx.navigation.NavGraph<ul><li>int mStartDestId</li><li>final SparseArrayCompat<NavDestination> mNodes</li></ul></li></ul></li></ul></li><li><p>androidx.navigation.NavController#onGraphCreated</p><ul><li>androidx.navigation.NavController#navigate(androidx.navigation.NavDestination, android.os.Bundle, androidx.navigation.NavOptions, androidx.navigation.Navigator.Extras)</li><li>androidx.navigation.NavGraphNavigator#navigate<ul><li>androidx.navigation.ActivityNavigator#navigate</li><li>androidx.navigation.fragment.FragmentNavigator#navigate<ul><li>androidx.navigation.fragment.FragmentNavigator#instantiateFragment</li></ul></li><li>androidx.navigation.fragment.DialogFragmentNavigator#navigate</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataBinding</title>
      <link href="2022/01/28/databinding/"/>
      <url>2022/01/28/databinding/</url>
      
        <content type="html"><![CDATA[<p>gradle-6.5-all</p><p>com.android.tools.build:gradle:4.1.2</p><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    buildFeatures <span class="token punctuation">{</span>        dataBinding <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="app-build-intermediates-data-binding-layout-info-type-merge-debug-out-fragment-garden-layout-xml"><a href="#app-build-intermediates-data-binding-layout-info-type-merge-debug-out-fragment-garden-layout-xml" class="headerlink" title="app/build/intermediates/data_binding_layout_info_type_merge/debug/out/fragment_garden-layout.xml"></a>app/build/intermediates/data_binding_layout_info_type_merge/debug/out/fragment_garden-layout.xml</h6><h6 id="app-build-intermediates-incremental-mergeDebugResources-stripped-dir-layout-fragment-garden-xml"><a href="#app-build-intermediates-incremental-mergeDebugResources-stripped-dir-layout-fragment-garden-xml" class="headerlink" title="app/build/intermediates/incremental/mergeDebugResources/stripped.dir/layout/fragment_garden.xml"></a>app/build/intermediates/incremental/mergeDebugResources/stripped.dir/layout/fragment_garden.xml</h6><h6 id="app-build-generated-data-binding-base-class-source-out-debug-out-com-google-samples-apps-sunflower-databinding-FragmentGardenBinding-java"><a href="#app-build-generated-data-binding-base-class-source-out-debug-out-com-google-samples-apps-sunflower-databinding-FragmentGardenBinding-java" class="headerlink" title="app/build/generated/data_binding_base_class_source_out/debug/out/com/google/samples/apps/sunflower/databinding/FragmentGardenBinding.java"></a>app/build/generated/data_binding_base_class_source_out/debug/out/com/google/samples/apps/sunflower/databinding/FragmentGardenBinding.java</h6><h6 id="app-build-generated-source-kapt-debug-com-google-samples-apps-sunflower-databinding-FragmentGardenBindingImpl-java"><a href="#app-build-generated-source-kapt-debug-com-google-samples-apps-sunflower-databinding-FragmentGardenBindingImpl-java" class="headerlink" title="app/build/generated/source/kapt/debug/com/google/samples/apps/sunflower/databinding/FragmentGardenBindingImpl.java"></a>app/build/generated/source/kapt/debug/com/google/samples/apps/sunflower/databinding/FragmentGardenBindingImpl.java</h6><pre class=" language-kotlin"><code class="language-kotlin">FragmentGardenBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FragmentGardenBinding</span> <span class="token keyword">extends</span> <span class="token class-name">ViewDataBinding</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FragmentGardenBinding <span class="token function">inflate</span><span class="token punctuation">(</span>            LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup root<span class="token punctuation">,</span> <span class="token keyword">boolean</span> attachToRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">inflate</span><span class="token punctuation">(</span>                inflater<span class="token punctuation">,</span>                root<span class="token punctuation">,</span>                attachToRoot<span class="token punctuation">,</span>                DataBindingUtil<span class="token punctuation">.</span><span class="token function">getDefaultComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> FragmentGardenBinding <span class="token function">inflate</span><span class="token punctuation">(</span>            LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup root<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> attachToRoot<span class="token punctuation">,</span> Object component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ViewDataBinding<span class="token punctuation">.</span>&lt;FragmentGardenBinding<span class="token operator">></span><span class="token function">inflateInternal</span><span class="token punctuation">(</span>                inflater<span class="token punctuation">,</span>                R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_garden<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DataBinderMapperImpl#INTERNAL_LAYOUT_ID_LOOKUP</span>                root<span class="token punctuation">,</span>                attachToRoot<span class="token punctuation">,</span>                component        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ViewDataBinding</span> <span class="token keyword">extends</span> <span class="token class-name">BaseObservable</span> <span class="token keyword">implements</span> <span class="token class-name">ViewBinding</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mapBindings</span><span class="token punctuation">(</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View root<span class="token punctuation">,</span>            <span class="token keyword">int</span> numBindings<span class="token punctuation">,</span> IncludedLayouts includes<span class="token punctuation">,</span> SparseIntArray viewsWithIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> bindings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>numBindings<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">mapBindings</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> includes<span class="token punctuation">,</span> viewsWithIds<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bindings<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * @param bindings      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mapBindings</span><span class="token punctuation">(</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View view<span class="token punctuation">,</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> bindings<span class="token punctuation">,</span> IncludedLayouts includes<span class="token punctuation">,</span> SparseIntArray viewsWithIds<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> indexInIncludes<span class="token punctuation">;</span>        <span class="token keyword">final</span> ViewDataBinding existingBinding <span class="token operator">=</span> <span class="token function">getBinding</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingBinding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object objTag <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String tag <span class="token operator">=</span> <span class="token punctuation">(</span>objTag <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> objTag <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRoot <span class="token operator">&amp;&amp;</span> tag <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"layout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> underscoreIndex <span class="token operator">=</span> tag<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>underscoreIndex <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> underscoreIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">parseTagInt</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> underscoreIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                indexInIncludes <span class="token operator">=</span> includes <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> index<span class="token punctuation">;</span>                isBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                indexInIncludes <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>BINDING_TAG_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tagIndex <span class="token operator">=</span> <span class="token function">parseTagInt</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> BINDING_NUMBER_START<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bindings<span class="token punctuation">[</span>tagIndex<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bindings<span class="token punctuation">[</span>tagIndex<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            isBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            indexInIncludes <span class="token operator">=</span> includes <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> tagIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Not a bound view</span>            indexInIncludes <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> index<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>viewsWithIds <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> viewsWithIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                        bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">instanceof</span>  <span class="token class-name">ViewGroup</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ViewGroup viewGroup <span class="token operator">=</span> <span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span> view<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> count <span class="token operator">=</span> viewGroup<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minInclude <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> View child <span class="token operator">=</span> viewGroup<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> isInclude <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>indexInIncludes <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String childTag <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>childTag<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"_0"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            childTag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"layout"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> childTag<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// This *could* be an include. Test against the expected includes.</span>                        <span class="token keyword">int</span> includeIndex <span class="token operator">=</span> <span class="token function">findIncludeIndex</span><span class="token punctuation">(</span>childTag<span class="token punctuation">,</span> minInclude<span class="token punctuation">,</span>                                includes<span class="token punctuation">,</span> indexInIncludes<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>includeIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            isInclude <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            minInclude <span class="token operator">=</span> includeIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> includes<span class="token punctuation">.</span>indexes<span class="token punctuation">[</span>indexInIncludes<span class="token punctuation">]</span><span class="token punctuation">[</span>includeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">final</span> <span class="token keyword">int</span> layoutId <span class="token operator">=</span> includes<span class="token punctuation">.</span>layoutIds<span class="token punctuation">[</span>indexInIncludes<span class="token punctuation">]</span><span class="token punctuation">[</span>includeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">int</span> lastMatchingIndex <span class="token operator">=</span> <span class="token function">findLastMatching</span><span class="token punctuation">(</span>viewGroup<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastMatchingIndex <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> child<span class="token punctuation">,</span>                                        layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">final</span> <span class="token keyword">int</span> includeCount <span class="token operator">=</span>  lastMatchingIndex <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> included <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">[</span>includeCount<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> includeCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    included<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> viewGroup<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                bindings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> included<span class="token punctuation">,</span>                                        layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>                                i <span class="token operator">+=</span> includeCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isInclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 递归调用</span>                    <span class="token function">mapBindings</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> child<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> includes<span class="token punctuation">,</span> viewsWithIds<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">ViewDataBinding</span><span class="token operator">></span> T <span class="token function">inflateInternal</span><span class="token punctuation">(</span>            LayoutInflater inflater<span class="token punctuation">,</span> <span class="token keyword">int</span> layoutId<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> attachToParent<span class="token punctuation">,</span> Object bindingComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>                inflater<span class="token punctuation">,</span>                layoutId<span class="token punctuation">,</span>                parent<span class="token punctuation">,</span>                attachToParent<span class="token punctuation">,</span>                <span class="token function">checkAndCastToBindingComponent</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBindingUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DataBinderMapper sMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBinderMapperImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">ViewDataBinding</span><span class="token operator">></span> T <span class="token function">inflate</span><span class="token punctuation">(</span>            LayoutInflater inflater<span class="token punctuation">,</span> <span class="token keyword">int</span> layoutId<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> attachToParent<span class="token punctuation">,</span> DataBindingComponent bindingComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> useChildren <span class="token operator">=</span> parent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> attachToParent<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> startChildren <span class="token operator">=</span> useChildren <span class="token operator">?</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutId<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> attachToParent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>useChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">bindToAddedViews</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> startChildren<span class="token punctuation">,</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// FragmentGardenBinding.inflate(inflater, container, false)</span>            <span class="token keyword">return</span> <span class="token function">bind</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">ViewDataBinding</span><span class="token operator">></span> T <span class="token function">bind</span><span class="token punctuation">(</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View root<span class="token punctuation">,</span>            <span class="token keyword">int</span> layoutId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> sMapper<span class="token punctuation">.</span><span class="token function">getDataBinder</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> androidx<span class="token punctuation">.</span>databinding<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBinderMapperImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MergedDataBinderMapper</span> <span class="token punctuation">{</span>    <span class="token function">DataBinderMapperImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>apps<span class="token punctuation">.</span>sunflower<span class="token punctuation">.</span>DataBinderMapperImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergedDataBinderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">DataBinderMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewDataBinding <span class="token function">getDataBinder</span><span class="token punctuation">(</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View view<span class="token punctuation">,</span>            <span class="token keyword">int</span> layoutId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>DataBinderMapper mapper <span class="token operator">:</span> mMappers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// com.google.samples.apps.sunflower.DataBinderMapperImpl</span>            ViewDataBinding result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getDataBinder</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">loadFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getDataBinder</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>apps<span class="token punctuation">.</span>sunflower<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBinderMapperImpl</span> <span class="token keyword">extends</span> <span class="token class-name">DataBinderMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAYOUT_FRAGMENTGARDEN <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SparseIntArray INTERNAL_LAYOUT_ID_LOOKUP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseIntArray</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        INTERNAL_LAYOUT_ID_LOOKUP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_garden<span class="token punctuation">,</span> LAYOUT_FRAGMENTGARDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewDataBinding <span class="token function">getDataBinder</span><span class="token punctuation">(</span>DataBindingComponent component<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> layoutId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> localizedLayoutId <span class="token operator">=</span> INTERNAL_LAYOUT_ID_LOOKUP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localizedLayoutId <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// tag</span>            <span class="token keyword">final</span> Object tag <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"view must have a tag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>localizedLayoutId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> LAYOUT_FRAGMENTGARDEN<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"layout/fragment_garden_0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FragmentGardenBindingImpl</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"The tag for fragment_garden is invalid. Received: "</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>apps<span class="token punctuation">.</span>sunflower<span class="token punctuation">.</span>databinding<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FragmentGardenBindingImpl</span> <span class="token keyword">extends</span> <span class="token class-name">FragmentGardenBinding</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">FragmentGardenBindingImpl</span><span class="token punctuation">(</span>androidx<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ViewDataBinding#mapBindings</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token function">mapBindings</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> sIncludes<span class="token punctuation">,</span> sViewsWithIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">FragmentGardenBindingImpl</span><span class="token punctuation">(</span>androidx<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>DataBindingComponent bindingComponent<span class="token punctuation">,</span> View root<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> bindings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>bindingComponent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token punctuation">,</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>android<span class="token punctuation">.</span>material<span class="token punctuation">.</span>button<span class="token punctuation">.</span>MaterialButton<span class="token punctuation">)</span> bindings<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token punctuation">,</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">)</span> bindings<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>            <span class="token punctuation">,</span> <span class="token punctuation">(</span>androidx<span class="token punctuation">.</span>recyclerview<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token punctuation">)</span> bindings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gardenList<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mboundView0 <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token punctuation">)</span> bindings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mboundView0<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mboundView2 <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>LinearLayout<span class="token punctuation">)</span> bindings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mboundView2<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setRootTag</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// listeners</span>        <span class="token function">invalidateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ViewModel</title>
      <link href="2022/01/27/viewmodel/"/>
      <url>2022/01/27/viewmodel/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ViewModel</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * 重写该方法来自定义数据的清空     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@MainThread</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCleared <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBagOfTags <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mBagOfTags<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> mBagOfTags<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// see comment for the similar call in setTagIfAbsent</span>                    <span class="token function">closeWithRuntimeException</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// clear 方法是 final 级，不可修改，但提供了 onCleared() 钩子。</span>        <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModelStore</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内部维护一个 HashMap 来管理 ViewModel</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span> mMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ViewModelStoreOwner</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns owned {@link ViewModelStore}     * ViewModelStore 的作用域。     * 实现类为 ComponentActivity 和 Fragment，以及 FragmentActivity.HostCallbacks     */</span>    ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModelProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewModelStoreOwner owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一个参数传入 ViewModelStoreOwner，确定了 ViewModelStore 的作用域。</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>owner<span class="token punctuation">.</span><span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> owner <span class="token keyword">instanceof</span> <span class="token class-name">HasDefaultViewModelProviderFactory</span>                <span class="token comment" spellcheck="true">// 第二个参数为 ViewModelProvider.Factory，用于初始化 ViewModel 对象。</span>                <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HasDefaultViewModelProviderFactory<span class="token punctuation">)</span> owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultViewModelProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">:</span> NewInstanceFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewModelStore store<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Factory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFactory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        mViewModelStore <span class="token operator">=</span> store<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentActivity</span> <span class="token keyword">implements</span>         <span class="token class-name">ViewModelStoreOwner</span><span class="token punctuation">,</span>        HasDefaultViewModelProviderFactory <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Your activity is not yet attached to the "</span>                    <span class="token operator">+</span> <span class="token string">"Application instance. You can't request ViewModel before onCreate call."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mViewModelStore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">ensureViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mViewModelStore <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NonConfigurationInstances nc <span class="token operator">=</span>                    <span class="token comment" spellcheck="true">// Activity#mLastNonConfigurationInstances.activity</span>                    <span class="token punctuation">(</span>NonConfigurationInstances<span class="token punctuation">)</span> <span class="token function">getLastNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nc <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Restore the ViewModelStore from NonConfigurationInstances</span>                mViewModelStore <span class="token operator">=</span> nc<span class="token punctuation">.</span>viewModelStore<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mViewModelStore <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mViewModelStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewModelProvider<span class="token punctuation">.</span>Factory <span class="token function">getDefaultViewModelProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Your activity is not yet attached to the "</span>                    <span class="token operator">+</span> <span class="token string">"Application instance. You can't request ViewModel before onCreate call."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDefaultFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDefaultFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedStateViewModelFactory</span><span class="token punctuation">(</span>                    <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span>                    <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mDefaultFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * mLastNonConfigurationInstances 是在 attach 方法里赋值的。     */</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>NonConfigurationInstances lastNonConfigurationInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLastNonConfigurationInstances <span class="token operator">=</span> lastNonConfigurationInstances<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActivityThread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ActivityThred 中的 ActivityClientRecord 不受 Activity 重建的影响。     */</span>    <span class="token keyword">private</span> Activity <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>lastNonConfigurationInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span>         <span class="token class-name">ViewModelStoreOwner</span><span class="token punctuation">,</span>        HasDefaultViewModelProviderFactory <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Can't access ViewModels from detached fragment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getMinimumMaxLifecycleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Lifecycle<span class="token punctuation">.</span>State<span class="token punctuation">.</span>INITIALIZED<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Calling getViewModelStore() before a Fragment "</span>                    <span class="token operator">+</span> <span class="token string">"reaches onCreate() when using setMaxLifecycle(INITIALIZED) is not "</span>                    <span class="token operator">+</span> <span class="token string">"supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewModelProvider<span class="token punctuation">.</span>Factory <span class="token function">getDefaultViewModelProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Can't access ViewModels from detached fragment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDefaultFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Application application <span class="token operator">=</span> null<span class="token punctuation">;</span>            Context appContext <span class="token operator">=</span> <span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>appContext <span class="token keyword">instanceof</span> <span class="token class-name">ContextWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>appContext <span class="token keyword">instanceof</span> <span class="token class-name">Application</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    application <span class="token operator">=</span> <span class="token punctuation">(</span>Application<span class="token punctuation">)</span> appContext<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                appContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ContextWrapper<span class="token punctuation">)</span> appContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> FragmentManager<span class="token punctuation">.</span><span class="token function">isLoggingEnabled</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>FragmentManager<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"Could not find Application instance from "</span>                        <span class="token operator">+</span> <span class="token string">"Context "</span> <span class="token operator">+</span> <span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", you will "</span>                        <span class="token operator">+</span> <span class="token string">"not be able to use AndroidViewModel with the default "</span>                        <span class="token operator">+</span> <span class="token string">"ViewModelProvider.Factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mDefaultFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedStateViewModelFactory</span><span class="token punctuation">(</span>                    application<span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span>                    <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mDefaultFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FragmentManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FragmentManagerViewModel mNonConfig<span class="token punctuation">;</span>        ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span>Fragment f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mNonConfig<span class="token punctuation">.</span><span class="token function">getViewModelStore</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> FragmentManagerViewModel <span class="token function">getChildNonConfig</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Fragment f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mNonConfig<span class="token punctuation">.</span><span class="token function">getChildNonConfig</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * mNonConfig 赋值的地方。     */</span>    <span class="token keyword">void</span> <span class="token function">attachController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> FragmentHostCallback<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> host<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> FragmentContainer container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Fragment parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get the FragmentManagerViewModel</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 嵌套 Fragment 的情况，FragmentManagerViewModel#mChildNonConfigs。</span>            mNonConfig <span class="token operator">=</span> parent<span class="token punctuation">.</span>mFragmentManager<span class="token punctuation">.</span><span class="token function">getChildNonConfig</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token keyword">instanceof</span> <span class="token class-name">ViewModelStoreOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// host is FragmentActivity.HostCallbacks</span>            ViewModelStore viewModelStore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ViewModelStoreOwner<span class="token punctuation">)</span> host<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mNonConfig <span class="token operator">=</span> FragmentManagerViewModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>viewModelStore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mNonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FragmentManagerViewModel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FragmentManagerViewModel</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 管理着 child 的 FragmentManagerViewModel</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> FragmentManagerViewModel<span class="token operator">></span> mChildNonConfigs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 管理着内部的 ViewModelStore</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModelStore<span class="token operator">></span> mViewModelStores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> FragmentManagerViewModel <span class="token function">getInstance</span><span class="token punctuation">(</span>ViewModelStore viewModelStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewModelProvider viewModelProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewModelProvider</span><span class="token punctuation">(</span>viewModelStore<span class="token punctuation">,</span>                FACTORY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> viewModelProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>FragmentManagerViewModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FragmentManagerViewModel <span class="token function">getChildNonConfig</span><span class="token punctuation">(</span>Fragment f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FragmentManagerViewModel childNonConfig <span class="token operator">=</span> mChildNonConfigs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mWho<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNonConfig <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            childNonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FragmentManagerViewModel</span><span class="token punctuation">(</span>mStateAutomaticallySaved<span class="token punctuation">)</span><span class="token punctuation">;</span>            mChildNonConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mWho<span class="token punctuation">,</span> childNonConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> childNonConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span>Fragment f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewModelStore viewModelStore <span class="token operator">=</span> mViewModelStores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mWho<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModelStore <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewModelStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mViewModelStores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mWho<span class="token punctuation">,</span> viewModelStore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> viewModelStore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FragmentActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">HostCallbacks</span> <span class="token keyword">implements</span> <span class="token class-name">ViewModelStoreOwner</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**         * 返回的是宿主 Activity 的 getViewModelStore。         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> FragmentActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LiveData</title>
      <link href="2022/01/26/livedata/"/>
      <url>2022/01/26/livedata/</url>
      
        <content type="html"><![CDATA[<h2 id="LiveData-一个简单易用的，具备感知生命周期能力的观察者模式。"><a href="#LiveData-一个简单易用的，具备感知生命周期能力的观察者模式。" class="headerlink" title="LiveData - 一个简单易用的，具备感知生命周期能力的观察者模式。"></a>LiveData - 一个简单易用的，具备感知生命周期能力的观察者模式。</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LiveData</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * 把 Activity 或 Fragment 作为 LifecycleOwner 参数传递进去。     * Activity 和 Fragment 默认会实现 LifecycleOwner 接口。     */</span>    <span class="token annotation punctuation">@MainThread</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertMainThread</span><span class="token punctuation">(</span><span class="token string">"observe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Lifecycle</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>owner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DESTROYED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ignore，生命周期状态已经 OnDestroy 的话，将直接返回。</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将 LifecycleOwner 和 Observer 保存起来。</span>        LifecycleBoundObserver wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleBoundObserver</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 Observer 和 wrapper 分别作为 key 和 value 存入 Map 中。</span>        ObserverWrapper existing <span class="token operator">=</span> mObservers<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>existing<span class="token punctuation">.</span><span class="token function">isAttachedTo</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot add the same observer"</span>                    <span class="token operator">+</span> <span class="token string">" with different lifecycles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将 LifecycleBoundObserver 作为 owner 生命周期的观察者。</span>        owner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LifecycleBoundObserver</span> <span class="token keyword">extends</span> <span class="token class-name">ObserverWrapper</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleEventObserver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">final</span> LifecycleOwner mOwner<span class="token punctuation">;</span>    <span class="token function">LifecycleBoundObserver</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner owner<span class="token punctuation">,</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        mOwner <span class="token operator">=</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">shouldBeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOwner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span>STARTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStateChanged</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner source<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> Lifecycle<span class="token punctuation">.</span>Event event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lifecycle<span class="token punctuation">.</span>State currentState <span class="token operator">=</span> mOwner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState <span class="token operator">==</span> DESTROYED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">removeObserver</span><span class="token punctuation">(</span>mObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Lifecycle<span class="token punctuation">.</span>State prevState <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevState <span class="token operator">!=</span> currentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            prevState <span class="token operator">=</span> currentState<span class="token punctuation">;</span>            <span class="token function">activeStateChanged</span><span class="token punctuation">(</span><span class="token function">shouldBeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentState <span class="token operator">=</span> mOwner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isAttachedTo</span><span class="token punctuation">(</span>LifecycleOwner owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOwner <span class="token operator">==</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mOwner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ObserverWrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> mObserver<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> mActive<span class="token punctuation">;</span>    <span class="token keyword">int</span> mLastVersion <span class="token operator">=</span> START_VERSION<span class="token punctuation">;</span>    <span class="token function">ObserverWrapper</span><span class="token punctuation">(</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObserver <span class="token operator">=</span> observer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">shouldBeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isAttachedTo</span><span class="token punctuation">(</span>LifecycleOwner owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">activeStateChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> newActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newActive <span class="token operator">==</span> mActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// immediately set active state, so we'd never dispatch anything to inactive</span>        <span class="token comment" spellcheck="true">// owner</span>        mActive <span class="token operator">=</span> newActive<span class="token punctuation">;</span>        <span class="token function">changeActiveCounter</span><span class="token punctuation">(</span>mActive <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dispatchingValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LifecycleEventObserver</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleObserver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Called when a state transition event happens.     *     * @param source The source of the event     * @param event The event     */</span>    <span class="token keyword">void</span> <span class="token function">onStateChanged</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner source<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Lifecycle<span class="token punctuation">.</span>Event event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据更新时，通知观察者。 */</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertMainThread</span><span class="token punctuation">(</span><span class="token string">"setValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVersion<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将要更新的数据赋值给 mData。</span>    mData <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数据分发给各个观察者。</span>    <span class="token function">dispatchingValue</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">dispatchingValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ObserverWrapper initiator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDispatchingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDispatchInvalidated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mDispatchingValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        mDispatchInvalidated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initiator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiator 不等于 null，仅仅通知传入的观察者。</span>            <span class="token function">considerNotify</span><span class="token punctuation">(</span>initiator<span class="token punctuation">)</span><span class="token punctuation">;</span>            initiator <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiator 等于 null，将会通知所有的观察者。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">,</span> ObserverWrapper<span class="token operator">>></span> iterator <span class="token operator">=</span>                    mObservers<span class="token punctuation">.</span><span class="token function">iteratorWithAdditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ObserverWrapper is LifecycleBoundObserver</span>                <span class="token function">considerNotify</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mDispatchInvalidated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>mDispatchInvalidated<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDispatchingValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">considerNotify</span><span class="token punctuation">(</span>ObserverWrapper observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observer<span class="token punctuation">.</span>mActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// we still first check observer.active to keep it as the entrance for events. So even if</span>    <span class="token comment" spellcheck="true">// the observer moved to an active state, if we've not received that event, we better not</span>    <span class="token comment" spellcheck="true">// notify for a more predictable notification order.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observer<span class="token punctuation">.</span><span class="token function">shouldBeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果观察者不是活跃状态，将不会通知此观察者</span>        observer<span class="token punctuation">.</span><span class="token function">activeStateChanged</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>observer<span class="token punctuation">.</span>mLastVersion <span class="token operator">>=</span> mVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    observer<span class="token punctuation">.</span>mLastVersion <span class="token operator">=</span> mVersion<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将保存的数据 mData 传入，也就实现了更新。</span>    observer<span class="token punctuation">.</span>mObserver<span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> mData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/09/30/hello-world/"/>
      <url>2021/09/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EnjoyEduNote</title>
      <link href="2021/05/11/enjoyedunote/"/>
      <url>2021/05/11/enjoyedunote/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="线程与进程理论知识入门"><a href="#线程与进程理论知识入门" class="headerlink" title="线程与进程理论知识入门"></a>线程与进程理论知识入门</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><h5 id="什么是进程和线程？"><a href="#什么是进程和线程？" class="headerlink" title="什么是进程和线程？"></a>什么是进程和线程？</h5><ul><li><p>进程：</p></li><li><p>线程：CPU调度的最小单位</p></li></ul><h5 id="CPU核心数和线程数的关系？"><a href="#CPU核心数和线程数的关系？" class="headerlink" title="CPU核心数和线程数的关系？"></a>CPU核心数和线程数的关系？</h5><ul><li>多核</li><li>超线程技术 1 : 2</li></ul><h5 id="CPU时间片轮转机制"><a href="#CPU时间片轮转机制" class="headerlink" title="CPU时间片轮转机制"></a>CPU时间片轮转机制</h5><ul><li>RR调度</li><li>CPU 1.6 GHz 执行一条指令：0.6 ns</li><li>上下文切换需要 20000 CPU周期</li></ul><h5 id="澄清并行和并发"><a href="#澄清并行和并发" class="headerlink" title="澄清并行和并发"></a>澄清并行和并发</h5><ul><li>并行：同时执行不同的任务</li><li>并发：时间段内</li></ul><h5 id="高并发编程的意义、好处和注意事项"><a href="#高并发编程的意义、好处和注意事项" class="headerlink" title="高并发编程的意义、好处和注意事项"></a>高并发编程的意义、好处和注意事项</h5><ul><li>线程安全问题</li><li>加锁</li><li>OS限制开辟线程</li></ul><h5 id="Java里的程序天生就是多线程的"><a href="#Java里的程序天生就是多线程的" class="headerlink" title="Java里的程序天生就是多线程的"></a>Java里的程序天生就是多线程的</h5><ul><li>main()</li></ul><h5 id="有几种新启线程的方式？"><a href="#有几种新启线程的方式？" class="headerlink" title="有几种新启线程的方式？"></a>有几种新启线程的方式？</h5><ul><li><p>There are two ways to create a new thread of execution. </p></li><li><p>类 Thread</p></li><li><p>接口 Runnable</p></li></ul><h5 id="Thread和Runnable的区别"><a href="#Thread和Runnable的区别" class="headerlink" title="Thread和Runnable的区别"></a>Thread和Runnable的区别</h5><ul><li>Thread：对线程的抽象</li><li>Runnable：对任务/业务逻辑的抽象</li></ul><h5 id="如何安全地停止一个线程？"><a href="#如何安全地停止一个线程？" class="headerlink" title="如何安全地停止一个线程？"></a>如何安全地停止一个线程？</h5><ul><li>stop() 不建议使用，它持有的锁和资源不会得到正确的释放。</li><li>interrupt() 对线程进行中断。中断标志位，打要中断的招呼。<strong>线程是协作式的</strong>。</li><li>isInterrupted() 判断当前线程是否被中断。</li><li>static interrupted() ClearInterrupted 中断状态是否重置。</li></ul><h1 id="123"><a href="#123" class="headerlink" title="123"></a>123</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="2021/03/16/c/"/>
      <url>2021/03/16/c/</url>
      
        <content type="html"><![CDATA[<p><strong>参考链接</strong></p><p><a href="https://www.phei.com.cn/module/goods/wssd_content.jsp?bookid=37655">C++ Primer（中文版）（第5版）</a></p><p><a href="https://www.epubit.com/bookDetails?id=UB7209840d845c9">C++ Primer Plus 第6版 中文版</a></p><h2 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>int main() {    std::cout << "Enter two numbers:" << std::endl;    int v1 = 0, v2 = 0;    std::cin >> v1 >> v2;    std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 + v2 << std::endl;    return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Camera</title>
      <link href="2021/03/15/camera/"/>
      <url>2021/03/15/camera/</url>
      
        <content type="html"><![CDATA[<p><strong>参考链接</strong></p><p><a href="https://juejin.cn/post/6844903534610087943">Android平台Camera开发实践指南</a></p><p><a href="https://blog.csdn.net/matrix_laboratory/article/details/82871247">Android Camera高级特性——手动对焦</a></p><p>定义统一接口，这个接口一般需要定义以下功能：</p><ul><li>打开相机</li><li>关闭相机</li><li>开启预览</li><li>关闭预览</li><li>拍照</li><li>开始视频录制</li><li>结束视频录制</li></ul><p>功能和 UI 分离</p><ul><li>利用 Fragment</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="手动对焦"><a href="#手动对焦" class="headerlink" title="手动对焦"></a>手动对焦</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Glide</title>
      <link href="2021/03/12/glide/"/>
      <url>2021/03/12/glide/</url>
      
        <content type="html"><![CDATA[<p><strong>参考链接：</strong></p><p><a href="https://blog.csdn.net/guolin_blog/category_9268670.html">Glide 最全解析</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LineageOS</title>
      <link href="2021/03/06/lineageos/"/>
      <url>2021/03/06/lineageos/</url>
      
        <content type="html"><![CDATA[<h1 id="LineageOS"><a href="#LineageOS" class="headerlink" title="LineageOS"></a>LineageOS</h1><h2 id="系统源码下载"><a href="#系统源码下载" class="headerlink" title="系统源码下载"></a>系统源码下载</h2><h3 id="下载-repo-工具"><a href="#下载-repo-工具" class="headerlink" title="下载 repo 工具"></a>下载 repo 工具</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/bin</code></pre><pre class=" language-bash"><code class="language-bash">$ PATH<span class="token operator">=</span>~/bin:<span class="token variable">$PATH</span></code></pre><pre class=" language-bash"><code class="language-bash">$ curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo <span class="token operator">></span> ~/bin/repo</code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> a+x ~/bin/repo</code></pre><h3 id="建立工作目录"><a href="#建立工作目录" class="headerlink" title="建立工作目录"></a>建立工作目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> lineageOS</code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> lineageOS</code></pre><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">export</span> REPO_URL<span class="token operator">=</span><span class="token string">'https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'</span></code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span></code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global url.https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/.insteadof https://android.googlesource.com</code></pre><pre class=" language-bash"><code class="language-bash">$ repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/lineageOS/LineageOS/android.git -b lineage-17.1</code></pre><h3 id="同步源码树"><a href="#同步源码树" class="headerlink" title="同步源码树"></a>同步源码树</h3><pre class=" language-bash"><code class="language-bash">$ repo <span class="token function">sync</span></code></pre><h2 id="Linux内核源码下载"><a href="#Linux内核源码下载" class="headerlink" title="Linux内核源码下载"></a>Linux内核源码下载</h2><h3 id="建立工作目录-1"><a href="#建立工作目录-1" class="headerlink" title="建立工作目录"></a>建立工作目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> kernel</code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> kernel</code></pre><h3 id="下载经过LineageOS适配的Linux内核源代码"><a href="#下载经过LineageOS适配的Linux内核源代码" class="headerlink" title="下载经过LineageOS适配的Linux内核源代码"></a>下载经过LineageOS适配的Linux内核源代码</h3><h2 id="系统源码编译"><a href="#系统源码编译" class="headerlink" title="系统源码编译"></a>系统源码编译</h2><p><strong>参考链接</strong></p><hr><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清华大学开源软件镜像站-Android 镜像使用帮助</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/lineageOS/">清华大学开源软件镜像站-lineageOS 源代码镜像使用帮助</a></p><p><a href="https://weread.qq.com/web/reader/aac321e07159a768aac1942">Android深度探索（卷2）：系统应用源代码分析与ROM定制</a></p><p><a href="https://source.android.com/setup/downloading">Android 开源项目 下载源代码</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lifecycle</title>
      <link href="2021/03/06/lifecycle/"/>
      <url>2021/03/06/lifecycle/</url>
      
        <content type="html"><![CDATA[<h1 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h1><p><img src="https://i.loli.net/2021/03/06/bhV8es23pJoCGQP.png" alt="image-20210127090303293.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LifecycleOwner</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the Lifecycle of the provider.     */</span>    Lifecycle <span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentActivity</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> LifecycleRegistry mLifecycleRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Lifecycle <span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mLifecycleRegistry<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifecycleRegistry</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>LifecycleObserver observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始状态为 INITIALIZED</span>        State initialState <span class="token operator">=</span> mState <span class="token operator">==</span> DESTROYED <span class="token operator">?</span> DESTROYED <span class="token operator">:</span> INITIALIZED<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将观察者和对应的状态保存在一起</span>        ObserverWithState statefulObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverWithState</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// observer 作为 Key，ObserverWithState 作为 Value，存放到 mObserverMap 中。</span>        ObserverWithState previous <span class="token operator">=</span> mObserverMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> statefulObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LifecycleOwner lifecycleOwner <span class="token operator">=</span> mLifecycleOwner<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lifecycleOwner <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// it is null we should be destroyed. Fallback quickly</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> isReentrance <span class="token operator">=</span> mAddingObserverCounter <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> mHandlingEvent<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算目标状态。</span>        State targetState <span class="token operator">=</span> <span class="token function">calculateTargetState</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        mAddingObserverCounter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>statefulObserver<span class="token punctuation">.</span>mState<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>targetState<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> mObserverMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pushParentState</span><span class="token punctuation">(</span>statefulObserver<span class="token punctuation">.</span>mState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把新添加的观察者的状态连续地同步到最新状态。</span>            statefulObserver<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>lifecycleOwner<span class="token punctuation">,</span> <span class="token function">upEvent</span><span class="token punctuation">(</span>statefulObserver<span class="token punctuation">.</span>mState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">popParentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// mState / subling may have been changed recalculate</span>            targetState <span class="token operator">=</span> <span class="token function">calculateTargetState</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReentrance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// we do sync only on the top level.</span>            <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mAddingObserverCounter<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 观察者和对应的状态     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObserverWithState</span> <span class="token punctuation">{</span>        State mState<span class="token punctuation">;</span>        LifecycleEventObserver mLifecycleObserver<span class="token punctuation">;</span>        <span class="token function">ObserverWithState</span><span class="token punctuation">(</span>LifecycleObserver observer<span class="token punctuation">,</span> State initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// </span>            mLifecycleObserver <span class="token operator">=</span> Lifecycling<span class="token punctuation">.</span><span class="token function">lifecycleEventObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>            mState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>LifecycleOwner owner<span class="token punctuation">,</span> Event event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            State newState <span class="token operator">=</span> <span class="token function">getStateAfter</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            mState <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>            mLifecycleObserver<span class="token punctuation">.</span><span class="token function">onStateChanged</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            mState <span class="token operator">=</span> newState<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lifecycling</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token keyword">static</span> LifecycleEventObserver <span class="token function">lifecycleEventObserver</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isLifecycleEventObserver <span class="token operator">=</span> object <span class="token keyword">instanceof</span> <span class="token class-name">LifecycleEventObserver</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isFullLifecycleObserver <span class="token operator">=</span> object <span class="token keyword">instanceof</span> <span class="token class-name">FullLifecycleObserver</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLifecycleEventObserver <span class="token operator">&amp;&amp;</span> isFullLifecycleObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FullLifecycleObserverAdapter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FullLifecycleObserver<span class="token punctuation">)</span> object<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>LifecycleEventObserver<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFullLifecycleObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FullLifecycleObserverAdapter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FullLifecycleObserver<span class="token punctuation">)</span> object<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLifecycleEventObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>LifecycleEventObserver<span class="token punctuation">)</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> klass <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token function">getObserverConstructorType</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> GENERATED_CALLBACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// GENERATED_CALLBACK 表示注解处理器生成的代码。</span>            List<span class="token operator">&lt;</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GeneratedAdapter</span><span class="token operator">>></span> constructors <span class="token operator">=</span>                    sClassToAdapters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>constructors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                GeneratedAdapter generatedAdapter <span class="token operator">=</span> <span class="token function">createGeneratedAdapter</span><span class="token punctuation">(</span>                        constructors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleGeneratedAdapterObserver</span><span class="token punctuation">(</span>generatedAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            GeneratedAdapter<span class="token punctuation">[</span><span class="token punctuation">]</span> adapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratedAdapter</span><span class="token punctuation">[</span>constructors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> constructors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                adapters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createGeneratedAdapter</span><span class="token punctuation">(</span>constructors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompositeGeneratedAdaptersObserver</span><span class="token punctuation">(</span>adapters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 表示使用反射。</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveGenericLifecycleObserver</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReflectiveGenericLifecycleObserver</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleEventObserver</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * 观察者     * Observer     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object mWrapped<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CallbackInfo mInfo<span class="token punctuation">;</span>    <span class="token function">ReflectiveGenericLifecycleObserver</span><span class="token punctuation">(</span>Object wrapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mWrapped <span class="token operator">=</span> wrapped<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 类信息缓存</span>        mInfo <span class="token operator">=</span> ClassesInfoCache<span class="token punctuation">.</span>sInstance<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span>mWrapped<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStateChanged</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner source<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Event event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 反射调用 OnLifecycleEvent 注解标记的生命周期回调方法。</span>        mInfo<span class="token punctuation">.</span><span class="token function">invokeCallbacks</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> event<span class="token punctuation">,</span> mWrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ClassesInfoCache</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     *     */</span>    CallbackInfo <span class="token function">getInfo</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> klass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CallbackInfo existing <span class="token operator">=</span> mCallbackMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> existing<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第一次是不会在 mCallbackMap 缓存中找到的，收集信息并创建。</span>        existing <span class="token operator">=</span> <span class="token function">createInfo</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> existing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param klass 观察者 Observer     */</span>    <span class="token keyword">private</span> CallbackInfo <span class="token function">createInfo</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> klass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 父类</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> superclass <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> handlerToEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>superclass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 递归</span>            CallbackInfo superInfo <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>superInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                handlerToEvent<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>superInfo<span class="token punctuation">.</span>mHandlerToEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 接口</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intrfc <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> entry <span class="token operator">:</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>                    intrfc<span class="token punctuation">)</span><span class="token punctuation">.</span>mHandlerToEvent<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">verifyAndPutHandler</span><span class="token punctuation">(</span>handlerToEvent<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> klass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> declaredMethods <span class="token operator">!=</span> null <span class="token operator">?</span> declaredMethods <span class="token operator">:</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> hasLifecycleMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 遍历所有方法得到与OnLifecycleEvent注解对应的信息</span>            OnLifecycleEvent annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>OnLifecycleEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 只关心带有OnLifecycleEvent注解信息的方法</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 有OnLifecycleEvent注解</span>            hasLifecycleMethods <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 方法参数</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> callType <span class="token operator">=</span> CALL_TYPE_NO_ARG<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                callType <span class="token operator">=</span> CALL_TYPE_PROVIDER<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 方法的第一个参数必须是实现LifecycleOwner接口的类型</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>LifecycleOwner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                            <span class="token string">"invalid parameter type. Must be one and instanceof LifecycleOwner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从注解信息中获取标记的生命周期事件</span>            Lifecycle<span class="token punctuation">.</span>Event event <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                callType <span class="token operator">=</span> CALL_TYPE_PROVIDER_WITH_EVENT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>Event<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 第二个参数必须是 Event。</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                            <span class="token string">"invalid parameter type. second arg must be an event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">!=</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>ON_ANY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 有两个参数，注解值只能是 ON_ANY。</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                            <span class="token string">"Second arg is supported only for ON_ANY value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 参数不能超过两个。</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"cannot have more than 2 params"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 包装方法调用类型和方法</span>            MethodReference methodReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodReference</span><span class="token punctuation">(</span>callType<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">verifyAndPutHandler</span><span class="token punctuation">(</span>handlerToEvent<span class="token punctuation">,</span> methodReference<span class="token punctuation">,</span> event<span class="token punctuation">,</span> klass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CallbackInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallbackInfo</span><span class="token punctuation">(</span>handlerToEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        mCallbackMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        mHasLifecycleMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> hasLifecycleMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 将包装了方法调用类型和方法的包装类、触发方法的生命周期事件，存放到Map集合中。     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">verifyAndPutHandler</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> handlers<span class="token punctuation">,</span>            MethodReference newHandler<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event newEvent<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> klass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lifecycle<span class="token punctuation">.</span>Event event <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> newEvent <span class="token operator">!=</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Method method <span class="token operator">=</span> newHandler<span class="token punctuation">.</span>mMethod<span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" in "</span> <span class="token operator">+</span> klass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" already declared with different @OnLifecycleEvent value: previous"</span>                            <span class="token operator">+</span> <span class="token string">" value "</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">", new value "</span> <span class="token operator">+</span> newEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">,</span> newEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MethodReference</span> <span class="token punctuation">{</span>                <span class="token function">MethodReference</span><span class="token punctuation">(</span><span class="token keyword">int</span> callType<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCallType <span class="token operator">=</span> callType<span class="token punctuation">;</span>            mMethod <span class="token operator">=</span> method<span class="token punctuation">;</span>            mMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">invokeCallback</span><span class="token punctuation">(</span>LifecycleOwner source<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event event<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//noinspection TryWithIdenticalCatches</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>mCallType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> CALL_TYPE_NO_ARG<span class="token operator">:</span>                        mMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> CALL_TYPE_PROVIDER<span class="token operator">:</span>                        mMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> CALL_TYPE_PROVIDER_WITH_EVENT<span class="token operator">:</span>                        mMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to call observer method"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 根据不同生命周期事件将 MethodReference 重新分类     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CallbackInfo</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Lifecycle<span class="token punctuation">.</span>Event<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>MethodReference<span class="token operator">>></span> mEventToHandlers<span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> mHandlerToEvent<span class="token punctuation">;</span>        <span class="token function">CallbackInfo</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> handlerToEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mHandlerToEvent <span class="token operator">=</span> handlerToEvent<span class="token punctuation">;</span>            mEventToHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>MethodReference<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event<span class="token operator">></span> entry <span class="token operator">:</span> handlerToEvent<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Lifecycle<span class="token punctuation">.</span>Event event <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>MethodReference<span class="token operator">></span> methodReferences <span class="token operator">=</span> mEventToHandlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>methodReferences <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    methodReferences <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mEventToHandlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> methodReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                methodReferences<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">invokeCallbacks</span><span class="token punctuation">(</span>LifecycleOwner source<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event event<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分发当前生命周期事件。</span>            <span class="token function">invokeMethodsForEvent</span><span class="token punctuation">(</span>mEventToHandlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> event<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 分发 ON_ANY 事件。</span>            <span class="token function">invokeMethodsForEvent</span><span class="token punctuation">(</span>mEventToHandlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Lifecycle<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>ON_ANY<span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> event<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeMethodsForEvent</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MethodReference<span class="token operator">></span> handlers<span class="token punctuation">,</span>                LifecycleOwner source<span class="token punctuation">,</span> Lifecycle<span class="token punctuation">.</span>Event event<span class="token punctuation">,</span> Object mWrapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> event<span class="token punctuation">,</span> mWrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EventBus</title>
      <link href="2021/03/06/eventbus/"/>
      <url>2021/03/06/eventbus/</url>
      
        <content type="html"><![CDATA[<h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> EventBus <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EventBus instance <span class="token operator">=</span> defaultInstance<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>EventBus<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> EventBus<span class="token punctuation">.</span>defaultInstance<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> EventBus<span class="token punctuation">.</span>defaultInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>双重校验并加锁的单例模式</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_BUILDER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EventBusBuilder DEFAULT_BUILDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBusBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">>></span> subscriptionsByEventType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// key为subscriber对象，value为subscriber对象中所有的 Event 类型链表</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> typesBySubscriber<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 专用于粘性事件处理 value为当前的事件</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> stickyEvents<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// newCachedThreadPool() 一个有则用、无则创建、无数量上限的线程池</span><span class="token keyword">private</span> <span class="token keyword">final</span> ExecutorService executorService<span class="token punctuation">;</span><span class="token function">EventBus</span><span class="token punctuation">(</span>EventBusBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subscriptionsByEventType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    typesBySubscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 粘性事件：在发送事件之后再订阅该事件也能收到。并且，粘性事件会保存在内存中，每次进入都会去内存中查找获取最新的粘性事件，除非你手动解除注册。</span>    stickyEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mainThreadSupport <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getMainThreadSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主线程事件发送器</span>    mainThreadPoster <span class="token operator">=</span> mainThreadSupport <span class="token operator">!=</span> null <span class="token operator">?</span> mainThreadSupport<span class="token punctuation">.</span><span class="token function">createPoster</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台事件发送器</span>    backgroundPoster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BackgroundPoster</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类似于 backgroundPoster，不同点：asyncPoster是异步运行的，可以同时接收多个任务。</span>    asyncPoster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncPoster</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    indexCount <span class="token operator">=</span> builder<span class="token punctuation">.</span>subscriberInfoIndexes <span class="token operator">!=</span> null <span class="token operator">?</span> builder<span class="token punctuation">.</span>subscriberInfoIndexes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 订阅方法查询</span>    subscriberMethodFinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubscriberMethodFinder</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>subscriberInfoIndexes<span class="token punctuation">,</span>            builder<span class="token punctuation">.</span>strictMethodVerification<span class="token punctuation">,</span> builder<span class="token punctuation">.</span>ignoreGeneratedIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// </span>    logSubscriberExceptions <span class="token operator">=</span> builder<span class="token punctuation">.</span>logSubscriberExceptions<span class="token punctuation">;</span>    logNoSubscriberMessages <span class="token operator">=</span> builder<span class="token punctuation">.</span>logNoSubscriberMessages<span class="token punctuation">;</span>    sendSubscriberExceptionEvent <span class="token operator">=</span> builder<span class="token punctuation">.</span>sendSubscriberExceptionEvent<span class="token punctuation">;</span>    sendNoSubscriberEvent <span class="token operator">=</span> builder<span class="token punctuation">.</span>sendNoSubscriberEvent<span class="token punctuation">;</span>    throwSubscriberException <span class="token operator">=</span> builder<span class="token punctuation">.</span>throwSubscriberException<span class="token punctuation">;</span>    eventInheritance <span class="token operator">=</span> builder<span class="token punctuation">.</span>eventInheritance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从builder中取出了一个默认的线程池对象</span>    executorService <span class="token operator">=</span> builder<span class="token punctuation">.</span>executorService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Subscription</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册的对象（在 Android 中时通常是 Activity对象）</span>    <span class="token keyword">final</span> Object subscriber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token keyword">final</span> SubscriberMethod subscriberMethod<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriberMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Method method<span class="token punctuation">;</span>    <span class="token keyword">final</span> ThreadMode threadMode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 代表了 Event 的类型</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> priority<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> sticky<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="EventBus-getDefault-register"><a href="#EventBus-getDefault-register" class="headerlink" title="EventBus.getDefault().register();"></a>EventBus.getDefault().register();</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>Object subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> subscriberClass <span class="token operator">=</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据当前注册类获取 subscriberMethods 这个订阅方法列表。</span>    List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> subscriberMethods <span class="token operator">=</span> subscriberMethodFinder<span class="token punctuation">.</span><span class="token function">findSubscriberMethods</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用了增强for循环令subsciber对象 对 subscriberMethods 中每个 SubscriberMethod 进行订阅。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SubscriberMethod subscriberMethod <span class="token operator">:</span> subscriberMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> <span class="token function">findSubscriberMethods</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> subscriberClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> subscriberMethods <span class="token operator">=</span> METHOD_CACHE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果缓存中有subscriberClass对象对应 的订阅方法列表，则直接返回。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberMethods <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> subscriberMethods<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreGeneratedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用生成的 APT 代码去优化寻找接收事件的过程</span>        subscriberMethods <span class="token operator">=</span> <span class="token function">findUsingReflection</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ignoreGeneratedIndex 默认为false，所以会执行findUsingInfo()方法</span>        subscriberMethods <span class="token operator">=</span> <span class="token function">findUsingInfo</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"Subscriber "</span> <span class="token operator">+</span> subscriberClass                <span class="token operator">+</span> <span class="token string">" and its super classes have no public methods with the @Subscribe annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成 subscriberMethods 成功的话会加入到缓存中</span>        METHOD_CACHE<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">,</span> subscriberMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> subscriberMethods<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> <span class="token function">findUsingInfo</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> subscriberClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FindState findState <span class="token operator">=</span> <span class="token function">prepareFindState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    findState<span class="token punctuation">.</span><span class="token function">initForSubscriber</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        findState<span class="token punctuation">.</span>subscriberInfo <span class="token operator">=</span> <span class="token function">getSubscriberInfo</span><span class="token punctuation">(</span>findState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span>subscriberInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SubscriberMethod<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> findState<span class="token punctuation">.</span>subscriberInfo<span class="token punctuation">.</span><span class="token function">getSubscriberMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SubscriberMethod subscriberMethod <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span><span class="token function">checkAdd</span><span class="token punctuation">(</span>subscriberMethod<span class="token punctuation">.</span>method<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">.</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    findState<span class="token punctuation">.</span>subscriberMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">findUsingReflectionInSingleClass</span><span class="token punctuation">(</span>findState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        findState<span class="token punctuation">.</span><span class="token function">moveToSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">getMethodsAndRelease</span><span class="token punctuation">(</span>findState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> FindState <span class="token function">prepareFindState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>FIND_STATE_POOL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> POOL_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            FindState state <span class="token operator">=</span> FIND_STATE_POOL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                FIND_STATE_POOL<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">return</span> state<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FindState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 初始化、回收对象等工作 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FindState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initForSubscriber</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> subscriberClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscriberClass <span class="token operator">=</span> clazz <span class="token operator">=</span> subscriberClass<span class="token punctuation">;</span>        skipSuperClasses <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        subscriberInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> SubscriberInfo <span class="token function">getSubscriberInfo</span><span class="token punctuation">(</span>FindState findState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span>subscriberInfo <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> findState<span class="token punctuation">.</span>subscriberInfo<span class="token punctuation">.</span><span class="token function">getSuperSubscriberInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubscriberInfo superclassInfo <span class="token operator">=</span> findState<span class="token punctuation">.</span>subscriberInfo<span class="token punctuation">.</span><span class="token function">getSuperSubscriberInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span>clazz <span class="token operator">==</span> superclassInfo<span class="token punctuation">.</span><span class="token function">getSubscriberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> superclassInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberInfoIndexes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SubscriberInfoIndex index <span class="token operator">:</span> subscriberInfoIndexes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SubscriberInfo info <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">getSubscriberInfo</span><span class="token punctuation">(</span>findState<span class="token punctuation">.</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> info<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// findState的subscriberInfo和subscriberInfoIndexes 这两个字段为空，所以这里直接返回 null。</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findUsingReflectionInSingleClass</span><span class="token punctuation">(</span>FindState findState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span>        methods <span class="token operator">=</span> findState<span class="token punctuation">.</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            methods <span class="token operator">=</span> findState<span class="token punctuation">.</span>clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LinkageError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// super class of NoClassDefFoundError to be a bit more broad...</span>            String msg <span class="token operator">=</span> <span class="token string">"Could not inspect methods of "</span> <span class="token operator">+</span> findState<span class="token punctuation">.</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreGeneratedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">+=</span> <span class="token string">". Please consider using EventBus annotation processor to avoid reflection."</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                msg <span class="token operator">+=</span> <span class="token string">". Please make this class visible to EventBus annotation processor to avoid reflection."</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        findState<span class="token punctuation">.</span>skipSuperClasses <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过反射的方式获取订阅者类中的所有声明方法，然后在这些方法里面寻找以 @Subscribe 作为注解的方法进行处理。     */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> modifiers <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>modifiers <span class="token operator">&amp;</span> Modifier<span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>modifiers <span class="token operator">&amp;</span> MODIFIERS_IGNORE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Subscribe subscribeAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Subscribe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribeAnnotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">=</span> parameterTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>findState<span class="token punctuation">.</span><span class="token function">checkAdd</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ThreadMode threadMode <span class="token operator">=</span> subscribeAnnotation<span class="token punctuation">.</span><span class="token function">threadMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**                         * 将方法名，threadMode，优先级，是否为 sticky 方法等信息封装到 SubscriberMethod 对象中，                         * 最后添加到 subscriberMethods 列表中                         */</span>                        findState<span class="token punctuation">.</span>subscriberMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubscriberMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> eventType<span class="token punctuation">,</span> threadMode<span class="token punctuation">,</span>                                subscribeAnnotation<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subscribeAnnotation<span class="token punctuation">.</span><span class="token function">sticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strictMethodVerification <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Subscribe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"@Subscribe method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span>                        <span class="token string">"must have exactly 1 parameter but has "</span> <span class="token operator">+</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strictMethodVerification <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Subscribe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span>methodName <span class="token operator">+</span>                    <span class="token string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> <span class="token function">getMethodsAndRelease</span><span class="token punctuation">(</span>FindState findState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从findState中取出了保存的subscriberMethods</span>    List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> subscriberMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>findState<span class="token punctuation">.</span>subscriberMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将findState里的保存的所有对象进行回收</span>    findState<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>FIND_STATE_POOL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> POOL_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>FIND_STATE_POOL<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 把findState存储在 FindState 池中方便下一次使用，以提高性能。</span>                FIND_STATE_POOL<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> findState<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> subscriberMethods<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Object subscriber<span class="token punctuation">,</span> SubscriberMethod subscriberMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">=</span> subscriberMethod<span class="token punctuation">.</span>eventType<span class="token punctuation">;</span>    Subscription newSubscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 subscriberMethod的eventType，在 subscriptionsByEventType 去查找一个 CopyOnWriteArrayList</span>    CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">></span> subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有则创建一个新的 CopyOnWriteArrayList</span>        subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 然后将这个 CopyOnWriteArrayList 放入 subscriptionsByEventType 中</span>        subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"Subscriber "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already registered to event "</span>                    <span class="token operator">+</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里有一个优先级的判断，说明它是按照优先级添加的。优先级越高，会插到在当前 List 靠前面的位置。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">||</span> subscriberMethod<span class="token punctuation">.</span>priority <span class="token operator">></span> subscriptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 添加 newSubscription对象</span>            subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> newSubscription<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> subscribedEvents <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedEvents <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subscribedEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对typesBySubscriber 进行添加</span>        typesBySubscriber<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscribedEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    subscribedEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否是 sticky 事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberMethod<span class="token punctuation">.</span>sticky<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Existing sticky events of all subclasses of eventType have to be considered.</span>            <span class="token comment" spellcheck="true">// Note: Iterating over all events may be inefficient with lots of sticky events,</span>            <span class="token comment" spellcheck="true">// thus data structure should be changed to allow a more efficient lookup</span>            <span class="token comment" spellcheck="true">// (e.g. an additional map storing sub classes of super classes: Class -> List&lt;Class>).</span>            Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">>></span> entries <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateEventType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateEventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object stickyEvent <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Object stickyEvent <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>Subscription newSubscription<span class="token punctuation">,</span> Object stickyEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stickyEvent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span>        <span class="token comment" spellcheck="true">// --> Strange corner case, which we don't take care of here.</span>        <span class="token comment" spellcheck="true">// 进行粘性事件的发送</span>        <span class="token function">postToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">,</span> <span class="token function">isMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="EventBus-getDefault-post"><a href="#EventBus-getDefault-post" class="headerlink" title="EventBus.getDefault().post();"></a>EventBus.getDefault().post();</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>PostingThreadState<span class="token operator">></span> currentPostingThreadState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>PostingThreadState<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> PostingThreadState <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PostingThreadState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span>Object event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PostingThreadState postingState <span class="token operator">=</span> currentPostingThreadState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> eventQueue <span class="token operator">=</span> postingState<span class="token punctuation">.</span>eventQueue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把传入的 event，保存到了当前线程中的一个变量 PostingThreadState 的 eventQueue 中。</span>    eventQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postingState<span class="token punctuation">.</span>isPosting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> <span class="token function">isMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"Internal error. Abort state was not reset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">postSingleEvent</span><span class="token punctuation">(</span>eventQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postingState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 包含了一个 eventQueue 和其他一些标志位 */</span><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PostingThreadState</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> eventQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isPosting<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isMainThread<span class="token punctuation">;</span>    Subscription subscription<span class="token punctuation">;</span>    Object event<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> canceled<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postSingleEvent</span><span class="token punctuation">(</span>Object event<span class="token punctuation">,</span> PostingThreadState postingState<span class="token punctuation">)</span> <span class="token keyword">throws</span> Error <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首先取出 Event 的 class 类型</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventClass <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> subscriptionFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标志位 判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取出 Event 及其父类和接口的 class 列表</span>        List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> eventTypes <span class="token operator">=</span> <span class="token function">lookupAllEventTypes</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> countTypes <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> countTypes<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            subscriptionFound <span class="token operator">|=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        subscriptionFound <span class="token operator">=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriptionFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logNoSubscriberMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>FINE<span class="token punctuation">,</span> <span class="token string">"No subscribers registered for event "</span> <span class="token operator">+</span> eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sendNoSubscriberEvent <span class="token operator">&amp;&amp;</span> eventClass <span class="token operator">!=</span> NoSubscriberEvent<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span>                eventClass <span class="token operator">!=</span> SubscriberExceptionEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoSubscriberEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 取出 Event 及其父类和接口的 class 列表 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">lookupAllEventTypes</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>eventTypesCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 做了一个 eventTypesCache 的缓存，这样就不用重复调用 getSuperclass() 方法。</span>        List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> eventTypes <span class="token operator">=</span> eventTypesCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventTypes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            eventTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> eventClass<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                eventTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">addInterfaces</span><span class="token punctuation">(</span>eventTypes<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clazz <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            eventTypesCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">,</span> eventTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> eventTypes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>Object event<span class="token punctuation">,</span> PostingThreadState postingState<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">></span> subscriptions<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据 Event 类型从 subscriptionsByEventType 中取出对应的 subscriptions对象</span>        subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>subscriptions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Subscription subscription <span class="token operator">:</span> subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>            postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> subscription<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> aborted<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">postToSubscription</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">,</span> postingState<span class="token punctuation">.</span>isMainThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                aborted <span class="token operator">=</span> postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> null<span class="token punctuation">;</span>                postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> null<span class="token punctuation">;</span>                postingState<span class="token punctuation">.</span>canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postToSubscription</span><span class="token punctuation">(</span>Subscription subscription<span class="token punctuation">,</span> Object event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> POSTING<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 内部直接采用反射调用</span>            <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MAIN<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 首先去判断当前是否在 UI 线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果是的话则直接反射调用</span>                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 否则把当前的方法加入到队列之中，然后通过 handler 去发送一个消息，在 handler 的 handleMessage 中去执行方法。</span>                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MAIN_ORDERED<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 与MAIN类似，不过是确保是顺序执行的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mainThreadPoster <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// temporary: technically not correct as poster not decoupled from subscriber</span>                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> BACKGROUND<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 判断当前是否在 UI 线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将方法加入到后台的一个队列，最后通过线程池去执行</span>                backgroundPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果不是的话则直接反射调用</span>                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ASYNC<span class="token operator">:</span>            <span class="token comment" spellcheck="true">/**              * 逻辑实现类似于BACKGROUND             * 不同于backgroundPoster的保证任一时间只且仅能有一个任务会被线程池执行的特性，             * 这里 asyncPoster 则是异步运行的，可以同时接收多个任务。             */</span>            asyncPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unknown thread mode: "</span> <span class="token operator">+</span> subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="EventBus-getDefault-unregister"><a href="#EventBus-getDefault-unregister" class="headerlink" title="EventBus.getDefault().unregister();"></a>EventBus.getDefault().unregister();</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unregister</span><span class="token punctuation">(</span>Object subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> subscribedTypes <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedTypes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">:</span> subscribedTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 移除了该 subscriber 的所有订阅信息。</span>            <span class="token function">unsubscribeByEventType</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 移除了注册对象和其对应的所有 Event 事件链表。</span>        typesBySubscriber<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">"Subscriber to unregister was not registered before: "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="EventBus-getDefault-postSticky"><a href="#EventBus-getDefault-postSticky" class="headerlink" title="EventBus.getDefault().postSticky();"></a>EventBus.getDefault().postSticky();</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postSticky</span><span class="token punctuation">(</span>Object event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>stickyEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将该事件放入 stickyEvents 中</span>        stickyEvents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Should be posted after it is putted, in case the subscriber wants to remove immediately</span>    <span class="token function">post</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>Subscription newSubscription<span class="token punctuation">,</span> Object stickyEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stickyEvent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span>        <span class="token comment" spellcheck="true">// --> Strange corner case, which we don't take care of here.</span>        <span class="token function">postToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">,</span> <span class="token function">isMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>参考链接</strong></p><hr><p><a href="https://juejin.cn/post/6844904082747080717">Android主流三方库源码分析（九、深入理解EventBus源码）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeakCanary</title>
      <link href="2021/03/06/leakcanary/"/>
      <url>2021/03/06/leakcanary/</url>
      
        <content type="html"><![CDATA[<h1 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h1><p><strong>参考链接:</strong></p><hr><p><a href="https://juejin.cn/post/6844904070977749005">Android主流三方库源码分析（六、深入理解Leakcanary源码）</a></p><p><a href="https://square.github.io/leakcanary/fundamentals-how-leakcanary-works/">fundamentals-how-leakcanary-works</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jetpack-Compose</title>
      <link href="2021/03/06/jetpack-compose/"/>
      <url>2021/03/06/jetpack-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Jetpack-Compose"><a href="#Jetpack-Compose" class="headerlink" title="Jetpack Compose"></a>Jetpack Compose</h1><p><strong>参考链接</strong></p><hr><p><a href="https://developer.android.com/jetpack/compose/setup">将 Android Studio 与 Jetpack Compose 配合使用</a></p><h2 id="将-Jetpack-Compose-添加到现有项目中"><a href="#将-Jetpack-Compose-添加到现有项目中" class="headerlink" title="将 Jetpack Compose 添加到现有项目中"></a>将 Jetpack Compose 添加到现有项目中</h2><h3 id="配置-Kotlin"><a href="#配置-Kotlin" class="headerlink" title="配置 Kotlin"></a>配置 Kotlin</h3><h4 id="确保您在项目中使用的是-Kotlin-1-4-21-或更高版本："><a href="#确保您在项目中使用的是-Kotlin-1-4-21-或更高版本：" class="headerlink" title="确保您在项目中使用的是 Kotlin 1.4.21 或更高版本："></a>确保您在项目中使用的是 Kotlin 1.4.21 或更高版本：</h4><pre class=" language-groovy"><code class="language-groovy">buildscript <span class="token punctuation">{</span>    ext<span class="token operator">.</span>kotlin_version <span class="token operator">=</span> <span class="token string">"1.4.30"</span>    <span class="token punctuation">...</span>    dependencies <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        classpath <span class="token string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'com.android.application'</span>    id <span class="token string">'kotlin-android'</span><span class="token punctuation">}</span></code></pre><h3 id="配置-Gradle"><a href="#配置-Gradle" class="headerlink" title="配置 Gradle"></a>配置 Gradle</h3><h4 id="您需要将应用的最低-API-级别设置为-21-或更高级别，并在应用的-build-gradle-文件中启用-Jetpack-Compose，如下所示。另外还要设置-Kotlin-编译器插件的版本。"><a href="#您需要将应用的最低-API-级别设置为-21-或更高级别，并在应用的-build-gradle-文件中启用-Jetpack-Compose，如下所示。另外还要设置-Kotlin-编译器插件的版本。" class="headerlink" title="您需要将应用的最低 API 级别设置为 21 或更高级别，并在应用的 build.gradle 文件中启用 Jetpack Compose，如下所示。另外还要设置 Kotlin 编译器插件的版本。"></a>您需要将应用的最低 API 级别设置为 21 或更高级别，并在应用的 build.gradle 文件中启用 Jetpack Compose，如下所示。另外还要设置 Kotlin 编译器插件的版本。</h4><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    defaultConfig <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        minSdkVersion <span class="token number">21</span>    <span class="token punctuation">}</span>    buildFeatures <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启用 Jetpack Compose</span>        compose <span class="token boolean">true</span>    <span class="token punctuation">}</span>        compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8    <span class="token punctuation">}</span>    kotlinOptions <span class="token punctuation">{</span>        jvmTarget <span class="token operator">=</span> <span class="token string">"1.8"</span>        useIR <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    composeOptions <span class="token punctuation">{</span>        kotlinCompilerVersion rootProject<span class="token operator">.</span>ext<span class="token operator">.</span>kotlin_version        kotlinCompilerExtensionVersion <span class="token string">'1.0.0-beta01'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="添加-Jetpack-Compose-工具包依赖项"><a href="#添加-Jetpack-Compose-工具包依赖项" class="headerlink" title="添加 Jetpack Compose 工具包依赖项"></a>添加 Jetpack Compose 工具包依赖项</h3><h4 id="在应用的-build-gradle-文件中添加-Jetpack-Compose-工具包依赖项"><a href="#在应用的-build-gradle-文件中添加-Jetpack-Compose-工具包依赖项" class="headerlink" title="在应用的 build.gradle 文件中添加 Jetpack Compose 工具包依赖项"></a>在应用的 build.gradle 文件中添加 Jetpack Compose 工具包依赖项</h4><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'androidx.compose.ui:ui:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// Tooling support (Previews, etc.)</span>    implementation <span class="token string">'androidx.compose.ui:ui-tooling:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)</span>    implementation <span class="token string">'androidx.compose.foundation:foundation:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// Material Design</span>    implementation <span class="token string">'androidx.compose.material:material:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// Material design icons</span>    implementation <span class="token string">'androidx.compose.material:material-icons-core:1.0.0-beta01'</span>    implementation <span class="token string">'androidx.compose.material:material-icons-extended:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// Integration with observables</span>    implementation <span class="token string">'androidx.compose.runtime:runtime-livedata:1.0.0-beta01'</span>    implementation <span class="token string">'androidx.compose.runtime:runtime-rxjava2:1.0.0-beta01'</span>    <span class="token comment" spellcheck="true">// UI Tests</span>    androidTestImplementation <span class="token string">'androidx.compose.ui:ui-test-junit4:1.0.0-beta01'</span><span class="token punctuation">}</span></code></pre><h2 id="布局预览"><a href="#布局预览" class="headerlink" title="布局预览"></a>布局预览</h2><ul><li><p>创建基本布局预览</p></li><li><p>将预览部署到设备</p></li><li><p>互动式预览</p></li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul><li><p>可组合函数是用于描述界面中某一部分的函数。</p></li><li><p>Compose 的标准布局组件(元素)</p><ul><li>每个基本布局都定义了自己的重心设置</li><li>Column</li><li>Row</li><li>Box</li><li>ScrollableColumn</li><li>ScrollableRow</li><li>LazyColumnFor</li><li>LazyRowFor </li></ul></li><li><p>修饰符</p><ul><li>Modifier</li><li>修饰符函数的顺序非常重要</li></ul></li><li><p>内置 Material 组件</p><ul><li>插槽</li><li>Scaffold</li><li>TopAppBar</li><li>BottomAppBar</li><li>FloatingActionButton</li><li>Drawer</li></ul></li><li><p>ConstraintLayout</p><ul><li>在实现对齐要求比较复杂的较大布局时，ConstraintLayout 很有用。</li><li>引用：createRefs() 或 createRefFor() 。parent 是一个现有的引用</li><li>constrainAs()</li><li>linkTo()</li><li>Decoupled API</li><li>ConstraintSet</li></ul></li><li><p>自定义布局</p><ul><li>使用布局修饰符<ul><li>measurable.measure(constraints)</li><li>layout(width, height)</li><li>placeRelative(x, y)</li></ul></li><li>创建自定义布局<ul><li>Layout 可组合项</li></ul></li><li>布局方向<ul><li>LayoutDirection</li><li>place(x, y)</li></ul></li></ul></li></ul><h2 id="Compose-中的主题"><a href="#Compose-中的主题" class="headerlink" title="Compose 中的主题"></a>Compose 中的主题</h2><ul><li>应用范围的主题<ul><li>Material Theming</li><li>颜色<ul><li>darkColors</li><li>lightColors</li><li>主题颜色&amp;表面颜色&amp;内容颜色</li><li>内容 Alpha 值 AmbientContentAlpha</li><li>深色主题 MaterialTheme.colors.isLight</li><li>扩展 Material 颜色</li></ul></li><li>字体排版<ul><li>Typography</li><li>TextStyle</li></ul></li></ul></li></ul><hr><h1 id="Android-Study-Jam-课程地址"><a href="#Android-Study-Jam-课程地址" class="headerlink" title="Android Study Jam 课程地址"></a>Android Study Jam <a href="https://developer.android.google.cn/courses/pathways/compose">课程地址</a></h1><h2 id="Jetpack-Compose-基础知识"><a href="#Jetpack-Compose-基础知识" class="headerlink" title="Jetpack Compose 基础知识"></a>Jetpack Compose 基础知识</h2><p>Jetpack Compose 是用于构建原生 Android 界面的新工具包。Jetpack Compose 使用更少的代码、强大的工具和直观的 Kotlin API 简化并加快了 Android 上的界面开发。</p><h3 id="可组合函数"><a href="#可组合函数" class="headerlink" title="可组合函数"></a>可组合函数</h3><h3 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h3><h3 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h3><h2 id="Compose-Beta-Overview"><a href="#Compose-Beta-Overview" class="headerlink" title="Compose Beta Overview"></a>Compose Beta Overview</h2><h2 id="Compose-编程思想"><a href="#Compose-编程思想" class="headerlink" title="Compose 编程思想"></a>Compose 编程思想</h2><h3 id="声明性编程范式"><a href="#声明性编程范式" class="headerlink" title="声明性编程范式"></a>声明性编程范式</h3><p>工作原理是在概念上从头开始重新生成整个屏幕，然后仅执行必要的更改。此方法可避免手动更新有状态视图层次结构的复杂性。Compose 是一个声明性界面框架。</p><h3 id="简单的可组合函数"><a href="#简单的可组合函数" class="headerlink" title="简单的可组合函数"></a>简单的可组合函数</h3><p>此函数不会返回任何内容。发出界面的 Compose 函数不需要返回任何内容，因为它们描述所需的屏幕状态，而不是构造界面微件。</p><h3 id="声明性范式转变"><a href="#声明性范式转变" class="headerlink" title="声明性范式转变"></a>声明性范式转变</h3><p>在 Compose 的声明性方法中，微件相对无状态，并且不提供 setter 或 getter 函数。实际上，微件不会以对象形式提供。您可以通过调用带有不同参数的同一可组合函数来更新界面。</p><p>当用户与界面交互时，界面会发起 onClick 等事件。这些事件应通知应用逻辑，应用逻辑随后可以改变应用的状态。当状态发生变化时，系统会使用新数据再次调用可组合函数。这会导致重新绘制界面元素，此过程称为“重组”。</p><h3 id="动态内容"><a href="#动态内容" class="headerlink" title="动态内容"></a>动态内容</h3><p>可以像其他任何 Kotlin 代码一样动态。</p><h3 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h3><p>在 Compose 中，您可以使用新数据再次调用可组合函数。这样做会导致函数进行重组 – 系统会根据需要使用新数据重新绘制函数发出的微件。</p><p>重组是指在输入更改时再次调用可组合函数的过程。通过跳过所有未更改参数的函数或 lambda，Compose 可以高效地重组。</p><p>附带效应是指对应用的其余部分可见的任何更改。</p><ul><li>写入共享对象的属性</li><li>更新 ViewModel 中的可观察项</li><li>更新共享偏好设置</li></ul><h4 id="可组合函数可以按任何顺序执行"><a href="#可组合函数可以按任何顺序执行" class="headerlink" title="可组合函数可以按任何顺序执行"></a>可组合函数可以按任何顺序执行</h4><h4 id="可组合函数可以并行运行"><a href="#可组合函数可以并行运行" class="headerlink" title="可组合函数可以并行运行"></a>可组合函数可以并行运行</h4><p>可组合函数可能会在后台线程池中执行。如果某个可组合函数对 ViewModel 调用一个函数，则 Compose 可能会同时从多个线程调用该函数。</p><h4 id="重组会跳过尽可能多的内容"><a href="#重组会跳过尽可能多的内容" class="headerlink" title="重组会跳过尽可能多的内容"></a>重组会跳过尽可能多的内容</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RxJava</title>
      <link href="2021/03/06/rxjava/"/>
      <url>2021/03/06/rxjava/</url>
      
        <content type="html"><![CDATA[<h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p><strong>参考链接</strong></p><hr><p><a href="https://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解</a></p><p><a href="https://juejin.cn/post/6844904067576102925">Android主流三方库源码分析（五、深入理解RxJava源码）</a></p><p><a href="https://www.jianshu.com/nb/14302692">RxJava 系列教程</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>步骤一：创建被观察者（Observable）&amp; 生产事件</p><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>步骤二：创建观察者（Observer）&amp; 定义响应事件的行为</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 观察者接收事件之前，     * 默认最先调用该复写方法。     * @param d     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Next 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param integer     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Error 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param e     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Complete 事件 &amp; 观察者接收到，     * 会调用该复写方法进行响应。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>步骤3：通过订阅（Subscribe）连接观察者和被观察者</p><pre class=" language-java"><code class="language-java">observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"observer is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        observer <span class="token operator">=</span> RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subscribeActual</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NOPMD</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Exceptions<span class="token punctuation">.</span><span class="token function">throwIfFatal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// can't call onError because no way to know if a Disposable has been set or not</span>        <span class="token comment" spellcheck="true">// can't call onSubscribe because the call might have set a Subscription already</span>        RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        NullPointerException npe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Actually not, but can't throw other exceptions due to RS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        npe<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> npe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="优雅使用"><a href="#优雅使用" class="headerlink" title="优雅使用"></a>优雅使用</h2><p>基于事件流的链式调用</p><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 观察者接收事件之前，     * 默认最先调用该复写方法。     * @param d     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Next 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param integer     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Error 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param e     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Complete 事件 &amp; 观察者接收到，     * 会调用该复写方法进行响应。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h2><ol><li>被观察者 Observable 的 subscribe() 具备多个重载的方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Subscribes to the current {@code Observable} and ignores {@code onNext} and {@code onComplete} emissions. * &lt;p> * If the {@code Observable} emits an error, it is wrapped into an * {@link OnErrorNotImplementedException} * and routed to the {@link RxJavaPlugins#onError(Throwable)} handler. * &lt;dl> *  &lt;dt>&lt;b>Scheduler:&lt;/b>&lt;/dt> *  &lt;dd>{@code subscribe} does not operate by default on a particular {@link Scheduler}.&lt;/dd> * &lt;/dl> * * @return the new {@link Disposable} instance that can be used to dispose the subscription at any time * @see &lt;a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe&lt;/a> */</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@NonNull</span><span class="token keyword">public</span> <span class="token keyword">final</span> Disposable <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Functions<span class="token punctuation">.</span><span class="token function">emptyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Functions<span class="token punctuation">.</span>ON_ERROR_MISSING<span class="token punctuation">,</span> Functions<span class="token punctuation">.</span>EMPTY_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Subscribes to the current {@code Observable} and provides a callback to handle the items it emits. * &lt;p> * If the {@code Observable} emits an error, it is wrapped into an * {@link OnErrorNotImplementedException} * and routed to the {@link RxJavaPlugins#onError(Throwable)} handler. * &lt;dl> *  &lt;dt>&lt;b>Scheduler:&lt;/b>&lt;/dt> *  &lt;dd>{@code subscribe} does not operate by default on a particular {@link Scheduler}.&lt;/dd> * &lt;/dl> * * @param onNext *             the {@code Consumer&lt;T>} you have designed to accept emissions from the current {@code Observable} * @return the new {@link Disposable} instance that can be used to dispose the subscription at any time * @throws NullPointerException *             if {@code onNext} is {@code null} * @see &lt;a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe&lt;/a> */</span><span class="token annotation punctuation">@CheckReturnValue</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@NonNull</span><span class="token keyword">public</span> <span class="token keyword">final</span> Disposable <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> onNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> Functions<span class="token punctuation">.</span>ON_ERROR_MISSING<span class="token punctuation">,</span> Functions<span class="token punctuation">.</span>EMPTY_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Subscribes to the current {@code Observable} and provides callbacks to handle the items it emits and any error * notification it signals. * &lt;dl> *  &lt;dt>&lt;b>Scheduler:&lt;/b>&lt;/dt> *  &lt;dd>{@code subscribe} does not operate by default on a particular {@link Scheduler}.&lt;/dd> * &lt;/dl> * * @param onNext *             the {@code Consumer&lt;T>} you have designed to accept emissions from the current {@code Observable} * @param onError *             the {@code Consumer&lt;Throwable>} you have designed to accept any error notification from the current *             {@code Observable} * @return the new {@link Disposable} instance that can be used to dispose the subscription at any time * @see &lt;a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe&lt;/a> * @throws NullPointerException *             if {@code onNext} or {@code onError} is {@code null} */</span><span class="token annotation punctuation">@CheckReturnValue</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@NonNull</span><span class="token keyword">public</span> <span class="token keyword">final</span> Disposable <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> onNext<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Throwable<span class="token operator">></span> onError<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> Functions<span class="token punctuation">.</span>EMPTY_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Subscribes to the current {@code Observable} and provides callbacks to handle the items it emits and any error or * completion notification it signals. * &lt;dl> *  &lt;dt>&lt;b>Scheduler:&lt;/b>&lt;/dt> *  &lt;dd>{@code subscribe} does not operate by default on a particular {@link Scheduler}.&lt;/dd> * &lt;/dl> * * @param onNext *             the {@code Consumer&lt;T>} you have designed to accept emissions from the current {@code Observable} * @param onError *             the {@code Consumer&lt;Throwable>} you have designed to accept any error notification from the current *             {@code Observable} * @param onComplete *             the {@link Action} you have designed to accept a completion notification from the current *             {@code Observable} * @return the new {@link Disposable} instance that can be used to dispose the subscription at any time * @throws NullPointerException *             if {@code onNext}, {@code onError} or {@code onComplete} is {@code null} * @see &lt;a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe&lt;/a> */</span><span class="token annotation punctuation">@CheckReturnValue</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@NonNull</span><span class="token keyword">public</span> <span class="token keyword">final</span> Disposable <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> onNext<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Throwable<span class="token operator">></span> onError<span class="token punctuation">,</span>        <span class="token annotation punctuation">@NonNull</span> Action onComplete<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> <span class="token string">"onNext is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>onError<span class="token punctuation">,</span> <span class="token string">"onError is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>onComplete<span class="token punctuation">,</span> <span class="token string">"onComplete is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LambdaObserver<span class="token operator">&lt;</span>T<span class="token operator">></span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaObserver</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> onComplete<span class="token punctuation">,</span> Functions<span class="token punctuation">.</span><span class="token function">emptyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">subscribe</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ls<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@SchedulerSupport</span><span class="token punctuation">(</span>SchedulerSupport<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"observer is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        observer <span class="token operator">=</span> RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subscribeActual</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NOPMD</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Exceptions<span class="token punctuation">.</span><span class="token function">throwIfFatal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// can't call onError because no way to know if a Disposable has been set or not</span>        <span class="token comment" spellcheck="true">// can't call onSubscribe because the call might have set a Subscription already</span>        RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        NullPointerException npe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Actually not, but can't throw other exceptions due to RS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        npe<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> npe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>可采用 Disposable.dispose() 切断观察者 与 被观察者之间的连接</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Disposable mDisposable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 观察者接收事件之前，     * 默认最先调用该复写方法。     * @param d     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDisposable <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Next 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param integer     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"切断观察者与被观察者之间的连接："</span> <span class="token operator">+</span> mDisposable<span class="token punctuation">.</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Error 事件 &amp; 观察者接收到时，     * 会调用该复写方法进行响应。     * @param e     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当被观察者生产 Complete 事件 &amp; 观察者接收到，     * 会调用该复写方法进行响应。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="创建操作符"><a href="#创建操作符" class="headerlink" title="创建操作符"></a>创建操作符</h2><h3 id="基本创建"><a href="#基本创建" class="headerlink" title="基本创建"></a>基本创建</h3><h4 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"sxczst:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"RxJava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"sxczst:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"RxJava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="快速创建-amp-发送事件"><a href="#快速创建-amp-发送事件" class="headerlink" title="快速创建 &amp; 发送事件"></a>快速创建 &amp; 发送事件</h3><h4 id="just"><a href="#just" class="headerlink" title="just()"></a>just()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"sxczst:"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"RxJava"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="fromArray"><a href="#fromArray" class="headerlink" title="fromArray()"></a>fromArray()</h4><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"sxczst:"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"RxJava"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="fromIterable"><a href="#fromIterable" class="headerlink" title="fromIterable()"></a>fromIterable()</h4><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sxczst:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"RxJava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 仅发送 Complete 事件，直接通知完成。即观察者接收后会直接调用 onCompleted()</span>Observable<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 仅发送 Error 事件，直接通知异常。即观察者接收后会直接调用 onError()</span>Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不发送任何事件，即观察者接收后什么也不会调用</span>Observable<span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="延迟创建"><a href="#延迟创建" class="headerlink" title="延迟创建"></a>延迟创建</h3><h4 id="defer"><a href="#defer" class="headerlink" title="defer()"></a>defer()</h4><h4 id="timer"><a href="#timer" class="headerlink" title="timer()"></a>timer()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Long l<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="interval"><a href="#interval" class="headerlink" title="interval()"></a>interval()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Long l<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="intervalRange"><a href="#intervalRange" class="headerlink" title="intervalRange()"></a>intervalRange()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Long l<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="rangeLong"><a href="#rangeLong" class="headerlink" title="rangeLong()"></a>rangeLong()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">rangeLong</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Long l<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="变换操作符"><a href="#变换操作符" class="headerlink" title="变换操作符"></a>变换操作符</h2><h3 id="应用场景-amp-对应操作符-介绍"><a href="#应用场景-amp-对应操作符-介绍" class="headerlink" title="应用场景 &amp; 对应操作符 介绍"></a>应用场景 &amp; 对应操作符 介绍</h3><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"使用 Map 变换操作符 将事件"</span> <span class="token operator">+</span> integer <span class="token operator">+</span> <span class="token string">"的参数从 整型"</span> <span class="token operator">+</span> integer <span class="token operator">+</span> <span class="token string">"变换成 字符串类型"</span> <span class="token operator">+</span> integer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> ObservableSource<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ObservableSource<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我是事件 "</span> <span class="token operator">+</span> integer <span class="token operator">+</span> <span class="token string">" 拆分后的子事件 "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap()"></a>concatMap()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> ObservableSource<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ObservableSource<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我是事件 "</span> <span class="token operator">+</span> integer <span class="token operator">+</span> <span class="token string">" 拆分后的子事件 "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer()"></a>buffer()</h4><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: 缓存区里面的事件数量 = "</span> <span class="token operator">+</span> integers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> integers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: 事件 = "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="组合-合并操作符"><a href="#组合-合并操作符" class="headerlink" title="组合/合并操作符"></a>组合/合并操作符</h2><h3 id="应用场景-amp-对应操作符-介绍-1"><a href="#应用场景-amp-对应操作符-介绍-1" class="headerlink" title="应用场景 &amp; 对应操作符 介绍"></a>应用场景 &amp; 对应操作符 介绍</h3><h4 id="组合多个被观察者"><a href="#组合多个被观察者" class="headerlink" title="组合多个被观察者"></a>组合多个被观察者</h4><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="concatArray"><a href="#concatArray" class="headerlink" title="concatArray()"></a>concatArray()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">concatArray</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="mergeArray"><a href="#mergeArray" class="headerlink" title="mergeArray()"></a>mergeArray()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="concatArrayDelayError"><a href="#concatArrayDelayError" class="headerlink" title="concatArrayDelayError()"></a>concatArrayDelayError()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">concatArrayDelayError</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="mergeArrayDelayError"><a href="#mergeArrayDelayError" class="headerlink" title="mergeArrayDelayError()"></a>mergeArrayDelayError()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">mergeArrayDelayError</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="合并多个事件"><a href="#合并多个事件" class="headerlink" title="合并多个事件"></a>合并多个事件</h4><h5 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> observable1 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable2 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>observable1<span class="token punctuation">,</span> observable2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> integer <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 接收到了事件"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest()"></a>combineLatest()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">combineLatest</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">,</span>        Observable<span class="token punctuation">.</span><span class="token function">intervalRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Long <span class="token function">apply</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">,</span> Long aLong2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token keyword">return</span> aLong <span class="token operator">+</span> aLong2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: 合并的结果是："</span> <span class="token operator">+</span> aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="combineLatestArrayDelayError"><a href="#combineLatestArrayDelayError" class="headerlink" title="combineLatestArrayDelayError()"></a>combineLatestArrayDelayError()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token operator">&lt;</span>Long<span class="token operator">></span> observable1 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token operator">&lt;</span>Long<span class="token operator">></span> observable2 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableEmitter<span class="token operator">&lt;</span>Long<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span><span class="token punctuation">;</span>        emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">[</span><span class="token punctuation">]</span> observables <span class="token operator">=</span> <span class="token punctuation">{</span>observable1<span class="token punctuation">,</span> observable2<span class="token punctuation">}</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">combineLatestArrayDelayError</span><span class="token punctuation">(</span>observables<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Long aLong <span class="token operator">=</span> 0L<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    aLong <span class="token operator">+=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> aLong<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe: 开始采用 subscribe 连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Long aLong<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: 合并的结果是："</span> <span class="token operator">+</span> aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: 对 Error 事件作出响应"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete: 对 Complete 事件作出响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">,</span> Integer integer2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token keyword">return</span> integer <span class="token operator">+</span> integer2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: 最终计算的结果是："</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="collect"><a href="#collect" class="headerlink" title="collect()"></a>collect()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span> Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="发生事件前追加发送事件"><a href="#发生事件前追加发送事件" class="headerlink" title="发生事件前追加发送事件"></a>发生事件前追加发送事件</h4><h5 id="startWith-startWithArray"><a href="#startWith-startWithArray" class="headerlink" title="startWith() / startWithArray()"></a>startWith() / startWithArray()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startWithArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="统计发送事件数量"><a href="#统计发送事件数量" class="headerlink" title="统计发送事件数量"></a>统计发送事件数量</h4><h5 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h5><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="订阅流程"><a href="#订阅流程" class="headerlink" title="订阅流程"></a>订阅流程</h3><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ObservableOnSubscribe<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> emitter <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onSubscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ObservableOnSubscribe<span class="token operator">&lt;</span>T<span class="token operator">></span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">"source is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个新的ObservableCreate对象，同时将定义好的ObservableOnSubscribe对象传入了ObservableCreate对象中。     * 最后调用了RxJavaPlugins.onAssembly()方法     */</span>    <span class="token keyword">return</span> RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onAssembly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableCreate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ObservableCreate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 仅仅是把ObservableOnSubscribe这个对象，保存在ObservableCreate中     */</span>    <span class="token keyword">final</span> ObservableOnSubscribe<span class="token operator">&lt;</span>T<span class="token operator">></span> source<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ObservableCreate</span><span class="token punctuation">(</span>ObservableOnSubscribe<span class="token operator">&lt;</span>T<span class="token operator">></span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">onAssembly</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Observable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span><span class="token operator">></span> f <span class="token operator">=</span> onObservableAssembly<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终仅仅是把我们的ObservableCreate给返回了     */</span>    <span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"observer is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        observer <span class="token operator">=</span> RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> <span class="token string">"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subscribeActual</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NOPMD</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Exceptions<span class="token punctuation">.</span><span class="token function">throwIfFatal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// can't call onError because no way to know if a Disposable has been set or not</span>        <span class="token comment" spellcheck="true">// can't call onSubscribe because the call might have set a Subscription already</span>        RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        NullPointerException npe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Actually not, but can't throw other exceptions due to RS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        npe<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> npe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> source<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Observable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> Observer<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token operator">></span> f <span class="token operator">=</span> onObservableSubscribe<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> source<span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> observer<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">subscribeActual</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">subscribeActual</span><span class="token punctuation">(</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CreateEmitter<span class="token operator">&lt;</span>T<span class="token operator">></span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateEmitter</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * 告诉观察者已经成功订阅了被观察者     */</span>    observer<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * ObservableOnSubscribe的subscribe()方法         */</span>        source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Exceptions<span class="token punctuation">.</span><span class="token function">throwIfFatal</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CreateEmitter</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token keyword">extends</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span>Disposable<span class="token operator">></span><span class="token keyword">implements</span> <span class="token class-name">ObservableEmitter</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> Disposable <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">;</span>        <span class="token function">CreateEmitter</span><span class="token punctuation">(</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observer <span class="token operator">=</span> observer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onError</span><span class="token punctuation">(</span>ExceptionHelper<span class="token punctuation">.</span><span class="token function">createNullPointerException</span><span class="token punctuation">(</span><span class="token string">"onNext called with a null value."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 判断当前的事件流是否被切断（废弃）了         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 判断当前的事件流是否被切断（废弃）了         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 通过get()方法首先从CreateEmitter的AtomicReference拿到保存的Disposable状态，         * 然后交给DisposableHelper进行判断处理。         */</span>          <span class="token keyword">return</span> DisposableHelper<span class="token punctuation">.</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>ObservableOnSubscribe<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> emitter <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ObservableEmitter是一个抽象类，     * 实现类是传入的CreateEmitter对象     */</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> DisposableHelper <span class="token keyword">implements</span> <span class="token class-name">Disposable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * 标记事件流被切断（废弃）状态的     */</span>    DISPOSED    <span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDisposed</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d <span class="token operator">==</span> DISPOSED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Atomically sets the field and disposes the old contents.     * @param field the target field     * @param d the new Disposable to set     * @return true if successful, false if the field contains the {@link #DISPOSED} instance.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>AtomicReference<span class="token operator">&lt;</span>Disposable<span class="token operator">></span> field<span class="token punctuation">,</span> Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Disposable current <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> DISPOSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    d<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 使用了原子引用AtomicReference内部包装的CAS方法处理了标识Disposable的并发读写问题             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    current<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Atomically disposes the Disposable in the field if not already disposed.     * @param field the target field     * @return true if the current thread managed to dispose the Disposable     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">dispose</span><span class="token punctuation">(</span>AtomicReference<span class="token operator">&lt;</span>Disposable<span class="token operator">></span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Disposable current <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Disposable d <span class="token operator">=</span> DISPOSED<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 使用了原子引用AtomicReference内部包装的CAS方法处理了标识Disposable的并发读写问题             */</span>            current <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    current<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onError</span><span class="token punctuation">(</span>ExceptionHelper<span class="token punctuation">.</span><span class="token function">createNullPointerException</span><span class="token punctuation">(</span><span class="token string">"onNext called with a null value."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 事件流此时若被切断，则不做处理     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryOnError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 事件流此时被切断，         * RxJavaPlugins.onError(t) 内部会直接抛出异常，导致崩溃。         */</span>        RxJavaPlugins<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryOnError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> ExceptionHelper<span class="token punctuation">.</span><span class="token function">createNullPointerException</span><span class="token punctuation">(</span><span class="token string">"onError called with a null Throwable."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 事件流没有被切断，最终会调用dispose()，将事件流进行切断。             */</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 事件流此时若被切断，则不做处理     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 事件流没有被切断，最终会调用dispose()，将事件流进行切断。             */</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Long-connection-technology</title>
      <link href="2021/03/06/long-connection-technology/"/>
      <url>2021/03/06/long-connection-technology/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5-WebSocket-Tencent-Mars"><a href="#HTML5-WebSocket-Tencent-Mars" class="headerlink" title="HTML5 WebSocket|Tencent Mars"></a>HTML5 WebSocket|Tencent Mars</h1><p><strong>参考链接</strong></p><hr><p><a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97">Mars Android 接入指南</a></p><p><a href="https://juejin.cn/post/6844903775337971725">Android 架构之长连接技术</a></p><p><a href="https://juejin.cn/post/6844904100224581646">聊聊OkHttp实现WebSocket细节，包括鉴权和长连接保活及其原理！</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Black-technology-to-keep-alive</title>
      <link href="2021/03/06/black-technology-to-keep-alive/"/>
      <url>2021/03/06/black-technology-to-keep-alive/</url>
      
        <content type="html"><![CDATA[<h1 id="黑科技保活"><a href="#黑科技保活" class="headerlink" title="黑科技保活"></a>黑科技保活</h1><p><strong>参考链接</strong></p><hr><p><a href="https://mp.weixin.qq.com/s/s7kYkHkbImjALuHKa7z30Q">Android 黑科技保活实现原理揭秘</a></p><p><a href="https://mp.weixin.qq.com/s/VS9XjiyzHJ0chbrLAA1k6Q">另一种黑科技保活方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Design-Pattern</title>
      <link href="2021/03/06/design-pattern/"/>
      <url>2021/03/06/design-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><strong>参考链接</strong></p><hr><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">runoob.com</a></p><p>《Kotlin 核心编程》第9章 设计模式</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>PowerDesigner</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</strong></p><p><strong>使用场景：</strong>我们明确地计划不同条件下创建不同实例时。</p><ul><li><p>日志记录器</p></li><li><p>数据库访问</p></li><li><p>设计一个连接服务器的框架</p></li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Computer <span class="token punctuation">{</span>    <span class="token keyword">val</span> cpu<span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 酷睿 */</span><span class="token keyword">class</span> <span class="token function">PC</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> cpu<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Core"</span><span class="token punctuation">)</span> <span class="token operator">:</span> Computer<span class="token comment" spellcheck="true">/** * 至强 */</span><span class="token keyword">class</span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> cpu<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Xeon"</span><span class="token punctuation">)</span> <span class="token operator">:</span> Computer<span class="token keyword">enum</span> <span class="token keyword">class</span> ComputerType <span class="token punctuation">{</span>    PC<span class="token punctuation">,</span>    Server<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 用单例代替工厂类 */</span><span class="token keyword">object</span> ComputerFactory <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过 operator 操作符重载 invoke方法来代替 produce方法     */</span>    operator <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>type<span class="token operator">:</span> ComputerType<span class="token punctuation">)</span><span class="token operator">:</span> Computer <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ComputerType<span class="token punctuation">.</span>PC <span class="token operator">-></span> <span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            ComputerType<span class="token punctuation">.</span>Server <span class="token operator">-></span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Computer <span class="token punctuation">{</span>    <span class="token keyword">val</span> cpu<span class="token operator">:</span> String    <span class="token comment" spellcheck="true">/**     * 伴生对象创建静态工厂方法。     * 用 Factory 来命名 Computer 的伴生对象。     */</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> Factory <span class="token punctuation">{</span>        operator <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>type<span class="token operator">:</span> ComputerType<span class="token punctuation">)</span><span class="token operator">:</span> Computer <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ComputerType<span class="token punctuation">.</span>PC <span class="token operator">-></span> <span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                ComputerType<span class="token punctuation">.</span>Server <span class="token operator">-></span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 酷睿 */</span><span class="token keyword">class</span> <span class="token function">PC</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> cpu<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Core"</span><span class="token punctuation">)</span> <span class="token operator">:</span> Computer<span class="token comment" spellcheck="true">/** * 至强 */</span><span class="token keyword">class</span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> cpu<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Xeon"</span><span class="token punctuation">)</span> <span class="token operator">:</span> Computer<span class="token keyword">enum</span> <span class="token keyword">class</span> ComputerType <span class="token punctuation">{</span>    PC<span class="token punctuation">,</span>    Server<span class="token punctuation">}</span></code></pre><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p><strong>围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类。</strong></p><p><strong>使用场景：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><ul><li>QQ 换皮肤，一整套一起换</li><li>生成不同操作系统的程序</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Computer<span class="token keyword">class</span> Dell <span class="token operator">:</span> Computer<span class="token keyword">class</span> Asus <span class="token operator">:</span> Computer<span class="token keyword">class</span> Acer <span class="token operator">:</span> Computer<span class="token keyword">abstract</span> <span class="token keyword">class</span> AbstractFactory <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Computer    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        operator <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>factory<span class="token operator">:</span> AbstractFactory<span class="token punctuation">)</span><span class="token operator">:</span> AbstractFactory <span class="token punctuation">{</span>            <span class="token keyword">return</span> factory        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/**         * 内联函数简化抽象工厂         */</span>        <span class="token keyword">inline</span> operator <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T <span class="token operator">:</span> Computer<span class="token operator">></span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractFactory <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Dell<span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">-></span> <span class="token function">DellFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            Asus<span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">-></span> <span class="token function">AsusFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            Acer<span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">-></span> <span class="token function">AcerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> DellFactory <span class="token operator">:</span> <span class="token function">AbstractFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Dell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> AsusFactory <span class="token operator">:</span> <span class="token function">AbstractFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Asus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> AcerFactory <span class="token operator">:</span> <span class="token function">AbstractFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Acer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p><strong>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</strong></p><p><strong>使用场景：</strong>一些基本部件不会变，而其组合经常变化的时候。</p><ul><li>需要生成的对象具有复杂的内部结构</li><li>需要生成的对象内部属性本身相互依赖</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Robot <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">/**         * 机器人代号         */</span>        <span class="token keyword">val</span> code<span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 电池         */</span>        <span class="token keyword">val</span> battery<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 高度         */</span>        <span class="token keyword">val</span> height<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 重量         */</span>        <span class="token keyword">val</span> weight<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> battery<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> height<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> weight<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">fun</span> <span class="token function">setBattery</span><span class="token punctuation">(</span>battery<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Builder <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>battery <span class="token operator">=</span> battery            <span class="token keyword">return</span> <span class="token keyword">this</span>        <span class="token punctuation">}</span>        <span class="token keyword">fun</span> <span class="token function">setHeight</span><span class="token punctuation">(</span>height<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Builder <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height            <span class="token keyword">return</span> <span class="token keyword">this</span>        <span class="token punctuation">}</span>        <span class="token keyword">fun</span> <span class="token function">setWeight</span><span class="token punctuation">(</span>weight<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Builder <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight            <span class="token keyword">return</span> <span class="token keyword">this</span>        <span class="token punctuation">}</span>        <span class="token keyword">fun</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Robot <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Robot</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> battery<span class="token punctuation">,</span> height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p><strong>为请求创建了一个接收者对象的链。通常每个接收者都包含对另一个接收者的引用。</strong></p><p><strong>使用场景：</strong>在处理消息的时候以过滤很多道。</p><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。</li><li>可动态指定一组对象处理请求</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> AbstractLogger <span class="token punctuation">{</span>    <span class="token keyword">var</span> level <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> nextLogger<span class="token operator">:</span> AbstractLogger<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">fun</span> <span class="token function">logMessage</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">,</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        nextLogger<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> message<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> INFO <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> DEBUG <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> ERROR <span class="token operator">=</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">ConsoleLogger</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AbstractLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Standard Console::Logger: <span class="token interpolation variable">$message</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">ErrorLogger</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AbstractLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Console::Logger: <span class="token interpolation variable">$message</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">FileLogger</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AbstractLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File::Logger: <span class="token interpolation variable">$message</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">getChainOfLoggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractLogger <span class="token punctuation">{</span>    <span class="token keyword">val</span> errorLogger <span class="token operator">=</span> <span class="token function">ErrorLogger</span><span class="token punctuation">(</span>AbstractLogger<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    <span class="token keyword">val</span> fileLogger <span class="token operator">=</span> <span class="token function">FileLogger</span><span class="token punctuation">(</span>AbstractLogger<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>    <span class="token keyword">val</span> consoleLogger <span class="token operator">=</span> <span class="token function">ConsoleLogger</span><span class="token punctuation">(</span>AbstractLogger<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>    errorLogger<span class="token punctuation">.</span>nextLogger <span class="token operator">=</span> fileLogger    fileLogger<span class="token punctuation">.</span>nextLogger <span class="token operator">=</span> consoleLogger    <span class="token keyword">return</span> errorLogger<span class="token punctuation">}</span></code></pre><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p><strong>用来降低多个对象和类之间的通信复杂性</strong></p><p><strong>使用场景：</strong>多个类相互耦合，形成了网状结构。</p><ul><li>系统中对象之间存在比较复杂的引用关系，导致他们之间的依赖关系结构混乱而且难以复用该对象。</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> ChatRoom <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">,</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span> [<span class="token interpolation"><span class="token delimiter variable">${</span>user<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span>]:<span class="token interpolation variable">$message</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatRoom<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p><strong>一个类的行为或其算法可以在运行时更改</strong></p><p><strong>使用场景：</strong></p><ul><li>一个系统需要动态地在几种算法中选择一种。</li><li>代替多重的条件选择语句。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">}</span><span class="token keyword">class</span> OperationAdd <span class="token operator">:</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">}</span><span class="token keyword">class</span> OperationSubtract <span class="token operator">:</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">}</span><span class="token keyword">class</span> OperationMultiply <span class="token operator">:</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Context</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> strategy<span class="token operator">:</span> Strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p><strong>作为两个不兼容的接口之间的桥梁。</strong></p><p><strong>使用场景：</strong></p><ul><li>系统需要使用现有的类，而此类的接口不符合系统的需要。</li><li>有动机地修改一个正常运行的系统的接口</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> MediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token operator">:</span> String<span class="token punctuation">,</span> fileName<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">interface</span> AdvancedMediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> VlcPlayer <span class="token operator">:</span> AdvancedMediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing vlc file. Name: <span class="token interpolation variable">$fileName</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Mp4Player <span class="token operator">:</span> AdvancedMediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing mp4 file. Name: <span class="token interpolation variable">$fileName</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">MediaAdapter</span><span class="token punctuation">(</span>audioType<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> MediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> advancedMediaPlayer<span class="token operator">:</span> AdvancedMediaPlayer    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"vlc"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            advancedMediaPlayer <span class="token operator">=</span> <span class="token function">VlcPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"mp4"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            advancedMediaPlayer <span class="token operator">=</span> <span class="token function">Mp4Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token operator">:</span> String<span class="token punctuation">,</span> fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"vlc"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            advancedMediaPlayer<span class="token punctuation">.</span><span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"mp4"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            advancedMediaPlayer<span class="token punctuation">.</span><span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> AudioPlayer <span class="token operator">:</span> MediaPlayer <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mediaAdapter<span class="token operator">:</span> MediaAdapter    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token operator">:</span> String<span class="token punctuation">,</span> fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"mp3"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing mp3 file. Name: <span class="token interpolation variable">$fileName</span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"vlc"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">||</span> audioType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"mp4"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mediaAdapter <span class="token operator">=</span> <span class="token function">MediaAdapter</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span>            mediaAdapter<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid media. <span class="token interpolation variable">$audioType</span> format not supported"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p><strong>用于把抽象化与实现化解耦，使得二者可以独立变化</strong></p><p><strong>使用场景：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p><ul><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> DrawAPI <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span>radius<span class="token operator">:</span> Int<span class="token punctuation">,</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> RedCircle <span class="token operator">:</span> DrawAPI <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span>radius<span class="token operator">:</span> Int<span class="token punctuation">,</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing Circle[color: red, radius: <span class="token interpolation variable">$radius</span>, x: <span class="token interpolation variable">$x</span>, y: <span class="token interpolation variable">$y</span>]"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> GreenCircle <span class="token operator">:</span> DrawAPI <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span>radius<span class="token operator">:</span> Int<span class="token punctuation">,</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing Circle[color: green, radius: <span class="token interpolation variable">$radius</span>, x: <span class="token interpolation variable">$x</span>, y: <span class="token interpolation variable">$y</span>]"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token keyword">val</span> drawAPI<span class="token operator">:</span> DrawAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Circle</span><span class="token punctuation">(</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> y<span class="token operator">:</span> Int<span class="token punctuation">,</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> radius<span class="token operator">:</span> Int<span class="token punctuation">,</span>        drawAPI<span class="token operator">:</span> DrawAPI<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span>drawAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        drawAPI<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="过滤器模式-标准模式"><a href="#过滤器模式-标准模式" class="headerlink" title="过滤器模式/标准模式"></a>过滤器模式/标准模式</h3><h3 id="组合模式-部分整体模式"><a href="#组合模式-部分整体模式" class="headerlink" title="组合模式/部分整体模式"></a>组合模式/部分整体模式</h3><p><strong>一个包含自己对象组的类。该类提供了修改相同对象组的方式。</strong></p><p><strong>使用场景：</strong>您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><ul><li>树形菜单</li><li>文件，文件夹的管理</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Employee</span><span class="token punctuation">(</span>        <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">val</span> dept<span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">val</span> salary<span class="token operator">:</span> Int<span class="token punctuation">,</span>        <span class="token keyword">val</span> subordinates<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subordinates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">remove</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subordinates<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p><strong>允许向一个现有的对象添加新的功能，同时又不改变其结构。</strong></p><p><strong>使用场景：</strong>在不想增加很多子类的情况下扩展类。</p><ul><li>扩展一个类的功能</li><li>动态增加功能，动态撤销</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> MacBook <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">fun</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String    <span class="token keyword">fun</span> <span class="token function">getProdDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token keyword">class</span> MacBookPro <span class="token operator">:</span> MacBook <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10000</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"MacBook Pro"</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getProdDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Late 2020"</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">ProcessorUpgradeMacBookPro</span><span class="token punctuation">(</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> macBook<span class="token operator">:</span> MacBook<span class="token punctuation">)</span> <span class="token operator">:</span> MacBook <span class="token keyword">by</span> macBook <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> macBook<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">219</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> macBook<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", + 1G Memory"</span><span class="token punctuation">}</span></code></pre><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p><strong>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。</strong></p><p><strong>使用场景：</strong>客户端不需要知道系统内部的复杂联系，整个系统只需要提供一个“接待员”即可</p><ul><li>为复杂的模块或子系统提供外界访问的模块。</li><li>预防低水平人员带来的风险。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Shape <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Rectangle <span class="token operator">:</span> Shape <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Rectangle::draw()"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Square <span class="token operator">:</span> Shape <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Square::draw()"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Circle <span class="token operator">:</span> Shape <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Circle::draw()"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> ShapeMaker <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> rectangle <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> square <span class="token operator">=</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">drawRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rectangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">drawSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        square<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>一个类代表另一个类的功能。创建具有现有对象的对象，以便向外界提供功能接口。</strong></p><p><strong>使用场景：</strong>想在访问一个类时做一些控制。</p><ul><li>Spring AOP</li><li>Windows 里面的快捷方式。</li><li>买火车票不一定在火车站买，也可以去代售点。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Image <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">RealImage</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Image <span class="token punctuation">{</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token function">loadFromDisk</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Displaying <span class="token interpolation variable">$fileName</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadFromDisk</span><span class="token punctuation">(</span>fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Loading <span class="token interpolation variable">$fileName</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">ProxyImage</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> fileName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Image <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> realImage<span class="token operator">:</span> RealImage<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realImage <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            realImage <span class="token operator">=</span> <span class="token function">RealImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        realImage<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Powered by Hexo</title>
      <link href="2021/02/24/powered-by-hexo/"/>
      <url>2021/02/24/powered-by-hexo/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"更新博客"</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin Hexo</code></pre><p>npm install</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo Setup </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
